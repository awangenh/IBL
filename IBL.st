<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorks® Personal Use Edition, 8.0 of 26 de setembro de 2014 on 28 de abril de 2015 at 14h30min42s</time-stamp>


<component-created>
<name>IBL</name> <type>package</type>
</component-created><!-- Package IBL* -->


<component-created>
<name>IBL</name> <type>package</type>
</component-created>

<class>
<name>IBLClass</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name color correct incorrect instances n lowerAcceptanceBoundary upperAcceptanceBoundary lowerDroppingBoundary upperDroppingBoundary </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>IBL</category>
<attributes>
<package>IBL</package>
</attributes>
</class>

<class>
<name>IBLAboutWindow</name>
<environment>Smalltalk</environment>
<super>UI.ApplicationModel</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>aboutText </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>IBL</package>
</attributes>
</class>

<class>
<name>IBLPattern</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>x y class name sim correct incorrect upperAcceptanceBoundary lowerAcceptanceBoundary upperDroppingBoundary lowerDroppingBoundary </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>IBL</category>
<attributes>
<package>IBL</package>
</attributes>
</class>

<class>
<name>IBLBrowser</name>
<environment>Smalltalk</environment>
<super>UI.ApplicationModel</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>algorithm train cd classes correct incorrect totalTraining noise iterations canvasSize color1 color2 dotsize lowerAcceptanceBoundary upperDroppingBoundary2 upperDroppingBoundary lowerDroppingBoundary lowerDroppingBoundary2 upperAcceptanceBoundary upperAcceptanceBoundary2 lowerAcceptanceBoundary2 list verbose stepwise transcript allowDropping acceptPatternsWithN0 CDsize acceptanceCIslider acceptanceCI droppingCI droppingCIslider acceptanceFIslider droppingFIslider droppingFI acceptanceFI dataset acceptables dropped trainBuffer droppedCollection random instancesClass1 droppedClass1 instancesClass2 droppedClass2 probabilityDistribution sigmaSlider sigma policy transcriptView </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>IBL</category>
<attributes>
<package>IBL</package>
</attributes>
</class>

<comment>
<class-id>IBLBrowser</class-id>
<body>IBLBrowser descriptionFirst read this: This software was intended to help the teaching of ML algorithms. It was developed in different, widely spaced, bursts of creativity between 2002 and 2015 and this was NOT done with any serious usability criteria in mind. The GUI is a patchwork of buttons, sliders and fields. Take a deep breath and use it as it is!Alternatively, you can improve it and send me a copy of your efforts...----------------------------------------------------------------------------------Background:The software, in various incarnations, has been used since 2002 atthe INE 5443 Reconhecimento de Padrões course (Pattern Recognition) held in the 7th semester of the undergrad CS Program at UFSC. It was intended to help teaching basic symbolic PR techniques on the exampleof traditional ML algorithms, such as the IB family. ----------------------------------------------------------------------------------Usage:1. Generating Training DataYou can generate double spiral datasets with and without noise. IBLBrowser always generates 360 points, 180 in each class.The Noise Level is the maximum noise, expressed in pixels, to be used in the generation of the double spiral.The Probability radio button chooses the Distribution used to generate noise for training patterns when noise is desired: - uniform - random generator with the noise range value used directly (always expressed in pixels) - normal - a normal distribution along the main curve with sigma of 0.399 and x in 0.5 is used. The Sigma of the probability distribution used to generate the training patterns can be set with the slider, allowing to parameterize the scattering of the points.2. Training with IBLPresently you can train using IB1, IB2 or IB3 (IB4 and IB5 wouldn´t make sense for a domain of 2 classes with only two variables). The IB version can be chosen with the radio button in the middle of the interface.  Learned patterns will appear as dots of the chosen dotsize in the middle drawing area.  The first pattern include in the Concept Description will always be drawn in a different color, since it is randomly chosen and not trained. Position and color are displayed in the transcript area.When training with IB1, wrongly classified patterns will appear as red dots, otherwise the color of the pertaining class will be used.When training with IB2, the color used for each plotted pattern is the color of the correct class of each pattern (since only incorrectly classified patterns will be learned).When training with IB3, dropped patterns will be recolored as red dots after they are dropped, so you can visualize where droppings occurred. Acceptance is caclulated using z = 0.9. This value can be changed on the corresponding sliders.3. Operating Modes when TrainingThere is a set of radio buttons that set operating modes and policies for the training process, mainly for IB3:Stepwise - when in IB3, simulation halt after acceptable pattern and dropping (when selected) has occured. Verbose - a log of the training steps is transcribed to the right text field (transcript). Will slow down considerably tthe training.Allow dropping - bad classifiers are allowed to be dropped. Dropping PIs and FIs are set to use z = 0.75. This value can be changed on the corresponding sliders.Accept n=0 - you can choose if patterns of the CD that were ever used before to classify something are acceptable as classification references for learning new patterns. Since their PIs would be infinite due to n=0, it is, in theory possible, but that is a question of interpretation. Policy for Non Acceptance - sets the policy to be used when no acceptable pattern was found. There are the following policies:- first - most similar pattern is chosen (can introduce bias)- random - a random pattern is chosen from the CD- weighted - a random pattern is chosen from the CD with class-weighted probabilities, so that roughly the probability of an instance of each class to be chosen is the same (class-bias avoidance)4. TestingClick on test and the IBLBrowser will systematically test the whole patterns space and color each pixel with the classification of each point, drwaing the decision surfaces that were learned during your simulation. The Data radio button selects which dataset is displayed in the list view below. Default is the CD. Untrained shows yet to be trained patterns and, after a simulation is run, should be empty. If you interrupt a simulation in Stepwise mode clicking inspect in the dialog window, you will be able to see which patterns are in the untrained list. 5. Resuming a halted simulationIf you halted a simulation in Stepwise mode using the inspect button of the dialog window, you can always continue the simulation clicking the play button in the inspector/halt window.================================================This work is distributed under the GNU GENERAL PUBLIC LICENSE GPLv3================================================Modified versions should be marked as changed AND the Author should be notified and receive a copy of thesse modifications.Any scientific work or other kind of publication using this software or theresults produced by it should mention it and its Author.Aldo von Wangenheim, (c) 2002 - 2015mailto:awangenh@inf.ufsc.brmailto:aldo.vw@ufsc.brhttp://www.incod.ufsc.brhttp://www.inf.ufsc.br/~awangenh================================================Useful links for the newbie in IBL/ML:SÁ LISBOA, F. O. S. ; NICOLETTI, M. C. . A Família de Algoritmos Instance-Based Learning (IBL). 1997. (Relatório de pesquisa) http://www.inf.ufsc.br/~patrec/bibliografia/Ibl.pdfDavid W. Aha, Dennis F. Kibler, Marc K. Albert. Instance-Based Learning Algorithms. Machine Learning 01/1991; 6(1):37-66. DOI:10.1023/A:1022689900470. https://www.researchgate.net/publication/220343419_Instance-Based_Learning_AlgorithmsDavid W. Aha, Dennis F. Kibler. Noise-Tolerant Instance-Based Learning Algorithms. Proceedings of the 11th international joint conference on Artificial intelligence - Volume 1; 01/1989 https://www.researchgate.net/publication/220814591_Noise-Tolerant_Instance-Based_Learning_AlgorithmsDavid W. Aha. Tolerating noisy, irrelevant and novel attributes in instance-based learning algorithms.  International Journal of Man-Machine Studies 02/1992; 36(2):267-287. Marc K. Albert, David W. Aha. Analyses of Instance-Based Learning Algorithms. Proceedings of the 9th National Conference on Artificial Intelligence, Anaheim, CA, USA, July 14-19, 1991, Volume 2.; 01/1991.----------------------------------------------------------------------------------Instance Variables:	algorithm				&lt;ValueModel&gt;			chosen method (IB1, IB2 or IB3)	canvasSize			&lt;Integer&gt;				size of the drawing area. Represented as a variable to be used in the drawing methods and											in order to allow easy resizing of the GUI in future versions.	cd					&lt;Ordered Collection&gt;		Concept Descriptor. Contains the learned patterns. See David's publications.	train					&lt;Ordered Collection&gt;		training set	trainBuffer				&lt;Ordered Collection&gt;		ephemerous copy of the training set which is depleted during training	droppedCollection		&lt;Ordered Collection&gt;		patterns that were droped during a training cycle (IB3 only)	classes				&lt;(Collection of: IBLClass)&gt;	Collection of the Categories/Classes into which the dataset is divided. 											IBLClass name is the method that retrieves the name of the class. It is always a number.	instancesClass1			&lt;ValueModel on Number&gt;	number of instances learned for Class 1. 											In IB3, dropped instances are subtracted from this number.	instancesClass2			&lt;ValueModel on Number&gt;	number of instances learned for Class 2											In IB3, dropped instances are subtracted from this number.	color1				&lt;ColorValue&gt;			Color to be used to draw the decision surfaces of the first class	color2				&lt;ColorValue&gt;			Color to be used to draw the decision surfaces of the second class	dotsize				&lt;ValueModel on Number&gt;	size of the point that represents each pattern on the canvas	CDsize				&lt;ValueModel on Number&gt;	number of patterns in CD	correct				&lt;ValueModel on Number&gt;	correctly classified patterns	incorrect				&lt;ValueModel on Number&gt;	incorrectly classified patterns	iterations				&lt;ValueModel&gt;			counter of iterations	acceptables			&lt;ValueModel on Number&gt;	number of patterns that were considered acceptable during a training cycle (IB3 only)	dropped				&lt;ValueModel on Number&gt;	number of patterns that were dropped during a training cycle (IB3 only)	droppedClass1			&lt;ValueModel on Number&gt;	number of patterns from Class #1 that were dropped during a training cycle (IB3 only)	droppedClass2			&lt;ValueModel on Number&gt;	number of patterns from Class #2 that were dropped during a training cycle (IB3 only)	totalTraining			&lt;ValueModel&gt;			number of training patterns generated	list					&lt;SelectionInList&gt;		model containing the collection presently been shown (can be CD, training set, untrained patterns or dropped patterns)	dataset				&lt;ValueModel on Symbol&gt;	selector of the content of   list (can be CD, training set, untrained patterns or dropped patterns)	random				&lt;FastRandom&gt;			a random generator for the pattern choosingPrecision and Frequency Intervals (GUI elements)	acceptanceCI 			&lt;ValueModel on Number&gt;	z-Value for the Acceptance Precision Interval. 1/100 of the value set at the coresponding slider.	droppingCI 			&lt;ValueModel on Number&gt;	z-Value for the Dropping Precision Interval. 1/100 of the value set at the coresponding slider.		acceptanceFI			&lt;ValueModel on Number&gt;	z-Value for the Acceptance Frequency Interval. 1/100 of the value set at the coresponding slider.		droppingFI 			&lt;ValueModel on Number&gt;	z-Value for the Dropping Frequency Interval. 1/100 of the value set at the coresponding slider.		acceptanceCIslider 		&lt;ValueModel on Number&gt;	Slider where you can select the z-Value for the Acceptance Precision Interval.	droppingCIslider  		&lt;ValueModel on Number&gt;	Slider where you can select the z-Value for the Dropping Precision Interval.	acceptanceFIslider 		&lt;ValueModel on Number&gt;	Slider where you can select the z-Value for the Acceptance Frequency Interval. 	droppingFIslider 		&lt;ValueModel on Number&gt;	Slider where you can select the z-Value for the Dropping Frequency Interval. Precision and Frequency Intervals (calculation elements)	lowerAcceptanceBoundary	&lt;ValueModel on Number&gt;	lowerAcceptanceBoundary for Class 1	lowerAcceptanceBoundary2	&lt;ValueModel on Number&gt;	lowerAcceptanceBoundary for Class 2	lowerDroppingBoundary	&lt;ValueModel on Number&gt;	lowerDroppingBoundary for Class 1	lowerDroppingBoundary2	&lt;ValueModel on Number&gt;	lowerDroppingBoundary for Class 2	upperAcceptanceBoundary	&lt;ValueModel on Number&gt;	upperAcceptanceBoundary for Class 1	upperAcceptanceBoundary2 &lt;ValueModel on Number&gt;	upperAcceptanceBoundary for Class 2	upperDroppingBoundary	&lt;ValueModel on Number&gt;	upperDroppingBoundary for Class 1	upperDroppingBoundary2	&lt;ValueModel on Number&gt;	upperDroppingBoundary for Class 2Training Pattern Generation Policies	noise					&lt;ValueModel on Number&gt;	maximum noise, expressed in pixels, to be used in the generation of the double spiral	probabilityDistribution		&lt;ValueModel on Symbol&gt;	probability distribution used to generate noise for training patterns when noise is desired.											#uniform - random generator with  noise range  used directly											#normal - a normal distribution with sigma around 0.3 to 0.4 and x in [0 0.5] is used. 	sigma				&lt;ValueModel on Number&gt;	sigma of the probability distribution used to generate training patterns. 1/1000 of the sigmaSlider.	sigmaSlider 			&lt;ValueModel on Number&gt;	Slider where you can select the sigma of the probability distribution used to generate training patternsIB Algorithm Policies	allowDropping			&lt;ValueHolder on Boolean&gt;	selector if dropping unused patterns is allowed (IB3 only)	acceptPatternsWithN0		&lt;ValueHolder on Boolean&gt;	selector if never used patterns (n=0 =&gt; PI = infinite) should be allowed to be taken into consideration											as acceptable patterns (IB3 only)	policy				&lt;ValueHolder on Symbol&gt;	selector of the training pattern selection policy to be followed when no acceptable pattern was found (IB3 only).											There are the following policies:											#first - most similar pattern is chosen											#random - a random pattern is chosen from the CD											#weighted - a random pattern is chosen from the CD with class-weighted probabilities, so that   											roughly the probability of an instance of each class to be chosen is the same (class-bias avoidance)GUI OPeration Modes	verbose				&lt;ValueHolder on Boolean&gt;	selector if in verbose mode	stepwise				&lt;ValueHolder on Boolean&gt;	selector if in step-by-step training modeUIBuilder's important namedComponents:	transcript				&lt;TextCollector&gt;			transcript of the training when performed in verbose mode	Subcanvas2			&lt;Subcanvas&gt;			shows the training result as dots in space, green and yellow dots of dotsize for learned patterns, red for incorrectly 											classified (IB1) or dropped (IB3) patterns. 	Subcanvas3			&lt;Subcanvas&gt;			testing results field. Shows the decision surfaces.											For the double spiral there will always be only two classes (Green and Yellow).</body>
</comment>

<methods>
<class-id>IBLAboutWindow class</class-id> <category>interface specs</category>

<body package="IBL" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'About IBLBrowser (shows the comment on the IBLBrowser class)' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 855 421 1855 921 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 940 465 994 488 ) 					#name: #ActionButton1 					#model: #close 					#label: 'Close' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 8 0 992 0 458 0 ) 					#name: #TextEditor1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7000 7000 7800) ) 					#model: #aboutText 					#tabRequiresControl: true ) ) ) )</body>
</methods>


<methods>
<class-id>IBLAboutWindow</class-id> <category>aspects</category>

<body package="IBL" selector="aboutText">aboutText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^aboutText isNil		ifTrue:			[aboutText := IBLBrowser comment asValue]		ifFalse:			[aboutText]</body>
</methods>

<methods>
<class-id>IBLAboutWindow</class-id> <category>actions</category>

<body package="IBL" selector="close">close	self builder window close.</body>
</methods>

<methods>
<class-id>IBLAboutWindow</class-id> <category>initialize-release</category>

<body package="IBL" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body>
</methods>


<methods>
<class-id>IBLClass class</class-id> <category>instance creation</category>

<body package="IBL" selector="named:color:">named: aNumber color: aColor	| theInstance |	theInstance := self new.	theInstance correct: 0.	theInstance incorrect: 0.	theInstance instances: 0.		theInstance name: aNumber.	theInstance color: aColor.	^theInstance</body>
</methods>


<methods>
<class-id>IBLClass</class-id> <category>accessing</category>

<body package="IBL" selector="lowerDroppingBoundary:">lowerDroppingBoundary: aNumber	lowerDroppingBoundary := aNumber</body>

<body package="IBL" selector="upperAcceptanceBoundary">upperAcceptanceBoundary	^upperAcceptanceBoundary</body>

<body package="IBL" selector="incorrect:">incorrect: aNumber	incorrect := aNumber</body>

<body package="IBL" selector="upperDroppingBoundary:">upperDroppingBoundary: aNumber	upperDroppingBoundary := aNumber</body>

<body package="IBL" selector="lowerAcceptanceBoundary">lowerAcceptanceBoundary	^lowerAcceptanceBoundary</body>

<body package="IBL" selector="incorrect">incorrect	^incorrect</body>

<body package="IBL" selector="correct:">correct: aNumber	correct := aNumber</body>

<body package="IBL" selector="lowerAcceptanceBoundary:">lowerAcceptanceBoundary: aNumber	lowerAcceptanceBoundary := aNumber</body>

<body package="IBL" selector="n:">n: aNumber	n := aNumber</body>

<body package="IBL" selector="color:">color: aColor	color := aColor</body>

<body package="IBL" selector="instances">instances	^instances</body>

<body package="IBL" selector="name:">name: aNumber	name := aNumber</body>

<body package="IBL" selector="n">n	^n</body>

<body package="IBL" selector="correct">correct	^correct</body>

<body package="IBL" selector="upperAcceptanceBoundary:">upperAcceptanceBoundary: aNumber	upperAcceptanceBoundary := aNumber</body>

<body package="IBL" selector="instances:">instances: aNumber	instances := aNumber</body>

<body package="IBL" selector="upperDroppingBoundary">upperDroppingBoundary	^upperDroppingBoundary</body>

<body package="IBL" selector="lowerDroppingBoundary">lowerDroppingBoundary	^lowerDroppingBoundary</body>

<body package="IBL" selector="name">name	^name</body>

<body package="IBL" selector="color">color	^color</body>
</methods>

<methods>
<class-id>IBLClass</class-id> <category>obsolete</category>

<body package="IBL" selector="updateClassBoundaries">updateClassBoundaries	"Obsolete!"	self halt.	"A high (z represents 90%) confidence is used for acceptance"	self lowerBoundaryZ: 0.9.	self upperBoundaryZ: 0.9.</body>

<body package="IBL" selector="updateClassBoundariesForDropping">updateClassBoundariesForDropping	"Obsolete!"	self halt.	"A lower confidence test (z represents 75%) represents confidence level for dropping"	self lowerBoundaryZ: 0.75.	self upperBoundaryZ: 0.75.</body>
</methods>

<methods>
<class-id>IBLClass</class-id> <category>calculations</category>

<body package="IBL" selector="incIncorrect">incIncorrect	incorrect isNil ifTrue: [ incorrect := 0].	incorrect := incorrect + 1.</body>

<body package="IBL" selector="incCorrect">incCorrect	correct isNil ifTrue: [ correct := 0].	correct := correct + 1.</body>

<body package="IBL" selector="incInstances">incInstances	instances isNil ifTrue: [ instances := 0].	instances := instances + 1.</body>

<body package="IBL" selector="lowerBoundaryZ:">lowerBoundaryZ: z	| lowerBoundary p z2 |	"This method calculates the Lower Boundary of the Frequency Interval (FI) of this particular class of patterns,	 using the formula given in: Aha, David. Tolerating noisy, irrelevant and novel attributes in instance-	 based learning algorithms. Int. J. Man-Machine Studies (1992) 36, 267-287. at page 276"	"In order to avoid division by 0 when beginning the algorithm, teste here if n is zero and return a huge value."	(n = 0) ifTrue: [ ^99.0 ].	"n is the number of previously processed training instances"	"instances is the number of presented (or learned?) patterns that belong to this class"	"p for FI is defined in Aha (1992) as the RELATIVE FREQUENCY of his particular class"	p := instances / n.	"calculate z-square in advance"	z2 := z * z.	"LOWER boundary:	 p + ( z2 / (2 * n)) &gt;&gt;MINUS&lt;&lt;&lt; z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)"	lowerBoundary := p + ( z2 / (2 * n)) - (z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)).	lowerBoundary := lowerBoundary / (1 + (z2 / n)).	^lowerBoundary</body>

<body package="IBL" selector="upperBoundaryZ:">upperBoundaryZ: z	| upperBoundary p z2 |	"This method calculates the Upper Boundary of the Frequency Interval (FI) of this particular class of patterns,	 using the formula given in: Aha, David. Tolerating noisy, irrelevant and novel attributes in instance-	 based learning algorithms. Int. J. Man-Machine Studies (1992) 36, 267-287. at page 276"	"In order to avoid division by 0 when beginning the algorithm, teste here if n is zero and return a huge value."	(n = 0) ifTrue: [ ^99.0 ].	"n is the number of previously processed training instances"	"instances is the number of presented (or learned?) patterns that belong to this class"	"p for FI is defined in Aha (1992) as the RELATIVE FREQUENCY of his particular class"	p := instances / n.	"calculate z-square in advance"	z2 := z * z.	"UPPER boundary:	 p + ( z2 / (2 * n)) &gt;&gt;PLUS&lt;&lt;&lt; z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)"	upperBoundary := p + ( z2 / (2 * n)) + (z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)).	upperBoundary := upperBoundary / (1 + (z2 / n)).	^upperBoundary</body>
</methods>


<methods>
<class-id>IBLBrowser class</class-id> <category>resources</category>

<body package="IBL" selector="logo">logo	"UIMaskEditor new openOnClass: self andSelector: #logo"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 74@49 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 65) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 2642); at: 3 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 5020); at: 4 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7662 scaledBlue: 7926); at: 5 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7662); at: 6 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 1849); at: 7 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 7134 scaledBlue: 6869); at: 8 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); at: 9 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 528); at: 10 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 11 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 2378); at: 12 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 7398); at: 13 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1585); at: 14 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6869 scaledBlue: 6605); at: 15 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3434 scaledBlue: 3434); at: 16 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 264); at: 17 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5284 scaledBlue: 5284); at: 18 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7926); at: 19 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 1849 scaledBlue: 2113); at: 20 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4756 scaledBlue: 4491); at: 21 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 7134); at: 22 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1321 scaledBlue: 1321); at: 23 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3699 scaledBlue: 3963); at: 24 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6605 scaledBlue: 6341); at: 25 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 26 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5020); at: 27 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1585 scaledBlue: 1849); at: 28 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4491 scaledBlue: 4227); at: 29 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6869 scaledBlue: 6869); at: 30 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 31 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3434 scaledBlue: 3699); at: 32 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6341 scaledBlue: 6077); at: 33 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2906 scaledBlue: 2906); at: 34 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7926); at: 35 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 4756 scaledBlue: 4756); at: 36 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1321 scaledBlue: 1585); at: 37 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 4227 scaledBlue: 3963); at: 38 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 39 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 40 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 3434); at: 41 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 6077 scaledBlue: 5812); at: 42 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 43 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7662); at: 44 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 4491); at: 45 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1056 scaledBlue: 1321); at: 46 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6341 scaledBlue: 6341); at: 47 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 528); at: 48 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 3170); at: 49 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5812 scaledBlue: 5548); at: 50 put: Graphics.ColorValue white; at: 51 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2378 scaledBlue: 2378); at: 52 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7662 scaledBlue: 7398); at: 53 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 54 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 792 scaledBlue: 1056); at: 55 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 56 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 57 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 2906); at: 58 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5548 scaledBlue: 5284); at: 59 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7926); at: 60 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 8191); at: 61 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 62 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7398 scaledBlue: 7134); at: 63 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3963 scaledBlue: 3963); at: 64 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 792); at: 65 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 5812 scaledBlue: 5812); yourself)) usingBits: (ByteArray fromPackedString: 'DS,QN1D;N1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D;DS,QN1D@@C,CDRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HQL&gt;FBL@@B8]I"8.KC0VLBD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@@@QN1D!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD"O"\U@@@.GRX.O142A4@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@@DPL;NB$2L#H2L#H2L#H2L#H2L#H2L#H2L#H2L#H2L#H2L"8@@@@@@@@@@@@@@@@@@@@@@@T2L#H2L#H2L#H2L#H2L#HJDRD!HRD@@AD;DR8.OB&lt; K2@/HB&lt; K2@/HB&lt; K2@/HB&lt; K2@''D &lt;@C0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@7C"@/HB&lt;/K2@/HB&lt; @CL!HRD!@@@C@0L7M3@!HRD!HRD!HRD!HRD!HRD!HRD!HRD_AP@@@@@@@@@@@AT$C"P"IBX0HQ LJP@@@@@@@B86HRD!HRD!HRD!DP@3HRD!HP@@DS,QM0 0HRD!HRD!HRD!HRD!HRD!HRD!HQD#@@@@@@@.@@&lt; M!P!HRD!HQ$]HRD!HRD3FC\@@@@@@B&lt;!HRD!HRD!HQD@L2D!HRD@@ADCN3\7PBD!HRD!HRD!HRD!HRD!HRD!E@0O@@@@@@@]ICL!HRD!HRD!HRDBI"D!HRD!HRD!M#HX@@@@BAD!HRD!HRD*@CL!HRD!@@@QN1D7BC@!HRD!HRD!HRD!HRD!HRD!K0@@@@@@@B\!HRD!HRD!HRD!HRD!FQ4!HRD!HRD!HRD!M T.@@@OIRD!HRD!J @3HRD!HP@@@0LCM3\0HRD!HRD!HRD!HRD!HRDTM0@@@@@UO!\!HRD!HRD!HRD!HRD!HQ$&amp;HRD!HRD!HRD!HRD!CP@@@@A@HRD!HR(@L2D!HRD@@AD;DS\HLBD!HRD!HRD!HRD!HRD4M0@O@@@2HRD!HRD!HRD!HRD!HRD!HRDYGRD!HRD!HRD!HRD!HRE@@@@@C1$!HRD*@CL!HRD!@@@Q@3,7M4@!HRD!HRD!HRD!HRDX@@@@@@@&gt;HRD!HRD!HRD!HRD!HRD!HRD!@"X!HRD!HRD!HRD!HRD!HP4@@@@@FRD!DP@3HRD!HP@@DS,QM0 0HRD!HRD!HRD!HRDR@@@''M18MHRD!HRD!HRD!HRD!HRD!HRD!HQ$]HRD!HRD!HRD!HRD!HRD!L1T@@@A@HR(@L2D!HRD@@@LC@3\7LBD!HRD!HRD!HRDE@@@@D@\!HRD!HRD!HRD!HRD!HRD!HRD!HRDYI"D!HRD!HRD!HRD!HRD!HRD\EP@@M2D3@CL!HRD!@@@QN1D7BC@!HRD!HRD!HRDV@@@@OAD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!FQ4!HRD!HRD!HRD!HRD!HRD!HSL@C3\TJ @3HRD!HP@@DPL;M3]@HRD!HRD!HRD2@@@@K 4!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HPH&amp;HRD!HRD!HRD!HRD!HRD!HRD!L @@FAD@L2D!HRD@@AD;DS\HLBD!HRD!HRDB@@@@K!P!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDYGRD!HRD!HRD!HRD!HRD!HRD!HRD@@@@\@CL!HRD!@@@C@0L7M3@!HRD!HRDKEP@@GRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!FRX!HRD!HRD!HRD!HRD!HRD!HRD!J@@@JP@3HRD!HP@@DS,QM0 0HRD!HRDF@@@@@A$!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HQ$]HRD!HRD!HRD!HRD!HRD!HRD!HRD&lt;@@@@L2D!HRD@@ADCN3\7PBD!HRD!I @@@B,!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDBI"D!HRD!HRD!HRD!HRD!HRD!HRD!B0@@@AD!HRD!@@@QN1D7BD@!HRD!BP@@@BHKHRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!FQ4!HRD!HRD!HRD!HRD!HRD!HRD!HRDH@@@&gt;HRD!HP@@@0LCM3\0HRD!DR8@A28QHRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HQ$&amplt;DBD!HRD!HRD!HRD!HRD!E@@@I"D!HP@@DPL;M3]@HR8@BQ0!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HPH.O @@@@@@@@@)LD@0PCA@LD@0PCA@LA@@@B8!HRD@@AD;DS\HLA$@@A@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDB@@@@@@&lt;@@@@O@@@@@@@@@@@@@@@@@@@@@@@.HRD!@@@C@0L7M2 L@A$!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!L @2EBD!O@T!J@@.HRD!HRD!HRD!HRD!HP@@M2D!HP@@DS,QM0 I@@&lt;!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!KP@HHRD!HQHRHSL@@CL!HRD!HRD!HRD!HR(@@C&lt;!HRD@@ADCN3\7A0@GDBD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HQ4@I"D!HRD&lt;M0TL@@@(HRD!HRD!HRD!HRDT@@@&amp;HRD!@@@QN1DHK"X@DRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HSL@@A4!HRD OA4&gt;O @@J"D!HRD!HRD!HRD!F@@@JRD!HP@@@0LCK#\@@BD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD%@@@7A08NO@@&amp;C! @K"D!HRD!HRD!HRD!HRP@@B4!HRD@@AD;DR8.@A !HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!E0@@M3HAL D&amp;@@@@@CL!HRD!HRD!HRD!HSL7@C\!HRD!@@@Q@3,.K @&gt;HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRT@@BX!HRD!HS8/E @!HRD!HRD!HRD!HRD @@@&lt;HRD!HP@@DS,QK#&lt;]HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDT@@@]HRD!HRD!HP,@HRD!HRD!HRD!HRD\@@@@B2D!HRD@@@LC@28.OBD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@@M2D!HRD!HRDT@BD!HRD!HRD!HRD!M0@@@CL!HRD!@@@QN1D7BD@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDN@@@NHRD!HRD!B0@!HRD!HRD!HRD!O @@M0@3HRD!HP@@DPL;M3\+HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!E@@@@B4!HRD!HP,@HRD!HRD!HRD!@P@@@@,@L2D!HRD@@AD;DS\HBRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDX@@@@B2D!HRDK@BD!HRD!HRD3O0@@@BT*@CL!HRD!@@@C@0L7M3@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@ @@@@@&gt;L2D!E@@!HRD!HQ\&gta'))</body>

<body package="IBL" selector="incod">incod	"UIMaskEditor new openOnClass: self andSelector: #incod"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 128@46 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 62) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 2642); at: 3 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 5020); at: 4 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7662); at: 5 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 1849); at: 6 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 7134 scaledBlue: 6869); at: 7 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); at: 8 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 528); at: 9 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 10 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 2378); at: 11 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 7398); at: 12 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1585); at: 13 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6869 scaledBlue: 6605); at: 14 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3434 scaledBlue: 3434); at: 15 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 264); at: 16 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5284 scaledBlue: 5284); at: 17 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 1849 scaledBlue: 2113); at: 18 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4756 scaledBlue: 4491); at: 19 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 7134); at: 20 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1321 scaledBlue: 1321); at: 21 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3699 scaledBlue: 3963); at: 22 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6605 scaledBlue: 6341); at: 23 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 24 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5020); at: 25 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1585 scaledBlue: 1849); at: 26 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4491 scaledBlue: 4227); at: 27 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6869 scaledBlue: 6869); at: 28 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 29 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3434 scaledBlue: 3699); at: 30 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6341 scaledBlue: 6077); at: 31 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2906 scaledBlue: 2906); at: 32 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7926); at: 33 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 4756 scaledBlue: 4756); at: 34 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1321 scaledBlue: 1585); at: 35 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 4227 scaledBlue: 3963); at: 36 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 37 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 38 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 3434); at: 39 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 6077 scaledBlue: 5812); at: 40 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 41 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7662); at: 42 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 4491); at: 43 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1056 scaledBlue: 1321); at: 44 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6341 scaledBlue: 6341); at: 45 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 528); at: 46 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 3170); at: 47 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5812 scaledBlue: 5548); at: 48 put: Graphics.ColorValue white; at: 49 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2378 scaledBlue: 2378); at: 50 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7662 scaledBlue: 7398); at: 51 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 52 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 792 scaledBlue: 1056); at: 53 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 54 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 55 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 2906); at: 56 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5548 scaledBlue: 5284); at: 57 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7926); at: 58 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 59 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7398 scaledBlue: 7134); at: 60 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3963 scaledBlue: 3963); at: 61 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 792); at: 62 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 5812 scaledBlue: 5812); yourself)) usingBits: (ByteArray fromPackedString: 'G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;1AQ(1G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;1D!(ZB!&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_M@PDA@PDA@PDG1&lt;_G1&lt;VA@PDA@PDB1&lt;_G1&lt;_G1&lt;_G1&lt;_G1\DA@PDA@P9G1&lt;_G1&lt;_G1&lt;_G1&lt;_J04[@@@@@@@@@@P2JA&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1H G!L@@@@@@@@@@@@KCSP_G1&lt;_G1&lt;_G1&lt;_G1&lt;Q@@@@@@@@C @_G1&lt;_G30@@@@@@@@@B1&lt;_G1&lt;_G1&lt;_G1&lt;_CP@@@@@N@BD_G1&lt;_G1&lt;_G1&lt;_I!,@@@@@@@@@@@@@@@@@L!&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G2@[@@@@@@@@@@@@@@@@@@@@@CT2G1&lt;_G1&lt;_G1&lt;_G10@@@@@@@@@C!&lt;_G1&lt;_@@@@@@@@@@@@J1&lt;_G1&lt;_G1&lt;_G1&lt;I@@@@@@@@@Q&lt;_G1&lt;_G1&lt;_G2\@@@@@@@@@@@@@@@@@@@@4G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_B0@@@@@@@@@@@@@@@@@@@@@@@@@,EQ&lt;_G1&lt;_G1&lt;_L@@@@@@@@@@5G1&lt;_G1&lt;@@@@@@@@@@@@@G1&lt;_G1&lt;_G1&lt;_G1,@@@@@@@@;G1&lt;_G1&lt;_G1&lt;,@@@@@@@@@@@@@@8@@@@@@A&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;[@@@@@@@@@@@@@@@@@@@N@@@@@@@@BA&lt;_G1&lt;_G1&lt;[@@@@@@@@@CT_G1&lt;_G0@@@@@@@@@@@@@''G1&lt;_G1&lt;_G1&lt;_@@@@@@@@@B@_G1&lt;_G1&lt;_MP@@@@@@@@@@@@@@@@@@@@@HG1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G20@@@@@@@@@KB\MCS@@@@@@@@@@@@@@GQ&lt;_G1&lt;_G0@@@@@@@@@@MQ&lt;_G1&lt;_@@8@@@@N@@@@C @JG1&lt;_G1&lt;_G1&lt;5@@@@@@@@MA&lt;_G1&lt;_G1L@@@8@@@@N@@@0OSD_JA(YKA&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_MP@@@@@@@@@BG1&lt;_G1&lt;O@@@@@@@@@@@5G1&lt;_G1&lt;_@@@@@@@@@@@[G1&lt;_G2 @@@@@@@@@@@@@@@@_G1&lt;_G1&lt;_G08@@@@@@@@RG1&lt;_G1&lt;)@@@@@@@@@@@@MA&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;JM3,%G!X;E1(_G1&lt;_G1&lt;_G1&lt;_G1&lt;@@@@@@@@@@@ _G1&lt;_G1&lt;E@@@@@@@@@@@TG1&lt;_G1&lt;@@@@@@@@@@C$_G1&lt;_G0@@@@@@@@@@@@@@@C,_G1&lt;_G1&lt;_C @@@@@@@B _G1&lt;_G08@@@@@@@8@@A(_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt; F08@@@@N@@@@@B02G1&lt;_G1&lt;_G1&lt;_G0@@@@8@@@@@MA&lt;_G1&lt;_G1&lt;F@@@N@@@@@@@_G1&lt;_J@@@@@@@@@@@E!&lt;_G1&lt;(@@@@@@@@@@@@@@@@@B _G1&lt;_G1&lt;@@@@@@@@@LQ&lt;_G1&lt;^@@@@@@@@@@@ G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;=@@@@@@@@@@@@@@@@@@@@GQ&lt;_G1&lt;_G1&lt;J@@@@@@@@@@@+G1&lt;_G1&lt;_G3D@@@@@@@@@@A&lt;_G1&lt;(@@@@@@@@@@@)G1&lt;_G2 @@@@@@@8@@@@N@@@@F1&lt;_G1&lt;_G0@@@@@@@@@(G1&lt;_G08N@@@@@@@@@A&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_N0@@@@@@@@@@@@@N@@@@@@@@BA&lt;_G1&lt;_G2L@@@@@@@@@@@T_G1&lt;_G1&lt;_G2P@@@@@@@@@G1&lt;_G2 @@@@@@@@@@@ _G1&lt;_J0@@@@@@@A,@@@@@@@@@C1&lt;_G1&lt;_@@@@@@@@@B _G1&lt;+@@@@@@@@@@@)G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G3,@@@@@@@@@@B(DA0@@@@@@@@@@F!&lt;_G1&lt;_B@@@@@@@@@@@LQ&lt;_G1&lt;_G1&lt;_A@@@@@@@@@@_G1&lt;_LP@@@@@@@@@@CA&lt;_G1&lt;H@@@@@@@@NP@@@@@@@@@@G1&lt;_G1&lt;@@@@N@@@@G1&lt;_G0P@@@@@@@@@@CD_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;+@@@N@@@@@@@ZG1&lt;_JP@@@@@@@@@GG1&lt;_G1&lt; @@@@@@@@@@@_G1&lt;_G1&lt;_G1&lt;-@@@@@@@@@A&lt;_G1&lt;1@@@@@@@@@@@(G1&lt;_G2H@@@@@@@@9I @@@@@@@@@KG1&lt;_C@@@@@@@@@@_G1&lt;_MP@@@@@@@@@@JA&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G3T@@@@@@@@@B!&lt;_G1&lt;_A@@@@@@@@@@.G1&lt;_G3,@@@@@@@@@@A&lt;_G1&lt;_G1&lt;_G1X@@@@@@@@@G1&lt;_G1H@@@@@@@@@@A&lt;_G1&lt;_IP@N@@@@@B\_I@@@@@@@@@@+G1&lt;=@@@@@@@@@A&lt;_G1&lt;5@@@@@@@@@BP_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt; @@@@@@@@@@X_G1&lt;_G1&lt;#@@@N@@@@@@,_G1&lt;_E @@@@@@@@@GG1&lt;_G1&lt;_G1&lt;_IP@@@@@@@@@_G1&lt;_OP@@@@@@@@@@G1&lt;_G1&lt;P@@@@@@@@A!&lt;(@@@@@@@@@@@_G2$@@@@@@@@5G1&lt;_G0@@@@@@@@@@G!&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G2P@@@@@@@@@AQ&lt;_G1&lt;_G1&lt;@@@@@@@@@@B _G1&lt;A@@@@@@@@@A,_G1&lt;_G1&lt;_G1&lt;^@@@@@@@@@A&lt;_G1&lt; @@@@@@@@@@8_G1&lt;_G2P@@@@@@@@ G1&lt;;@@@@@@@@@A8_A @@@@@@@AL_G1&lt;1@@@@@@@@@@@2G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_@@@@@@8@@@@_G1&lt;_G1&lt;_G1,@@@@@@@@@D!&lt;_G0$@@@@@@@@@DA&lt;_G1&lt;_G1&lt;_G3@@@@@@@@8@G1&lt;_G0X@@@@@@@@@@A&lt;_G1&lt;_@@@@@@@@@C4_G1&lt;@@@@@@@@@@CD0@@@@@@@@LA&lt;_G1T@@@@@@@@@@A\_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G3\@@@@@@@@@F1&lt;_G1&lt;_G1&lt;_I@@@@@@@@@@+G1&lt;_B0@@@@@@@@@''G1&lt;_G1&lt;_G1&lt;_B0@@@@@@@@@_G1&lt;_I0@@@@@@@@@5G1&lt;_G1&lt;@@@@@@@@@D!&lt;_G1H@@@@@@@@@KC@@@@@@@@@FG1&lt;_J0@@C @@@@@@HA&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_E @@@@@@@@@VG1&lt;_G1&lt;_G1&lt;[@@@@@@@@@B,_G1&lt;S@@@@@@@@@@4_G1&lt;_G1&lt;_G1&lt;&lt;@@@@@@@@@A&lt;_G1&lt;S@@@@@@@@@CT_G1&lt;_G0@@@@@@@@@_G1&lt;_G3@@@@@@@@@@B0@@@@@@@B@_G1&lt;J@@@@@@@@@@@FG1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;K@@@@@@@@@A$_G1&lt;_G1&lt;_G2P@@@@@@@@@J1&lt;_G2P@@@@@@@@@N1&lt;_G1&lt;_G1&lt;_G0@@@@@@@@@@G1&lt;_G3T@@@@@@@@@A1&lt;_G1&lt;_C @@@@@@@A&lt;_G1&lt;_G0@@@@8@@@@@@@@@@@@@OQ&lt;_G1&lt;@@@@@@@@@@AL_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1L@@@@@@@@@C1&lt;_G1&lt;_G1&lt;_A0@@@@@@@@@RG1&lt;_A0@@@@@@@@@WG1&lt;_G1&lt;_G1&lt;+@@@@@@@@@@@_G1&lt;_@@@@@@@@@@@$G1&lt;_G1&lt;@@@@@@@@@G1&lt;_G1&lt;_OP@@@@@@@@@@@@@@@@@EG1&lt;_G0@@@@@@@@@@@A&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_D0@@@@@@@@@7G1&lt;_G1&lt;_G1&lt;@@@@@@@@@@B _G1&lt;@@@@@@@@@@C\_G1&lt;_G1&lt;_G0X@@@@@@@@@@A&lt;_G1&lt;@@@@@@@@@@@$_G1&lt;_J@@@@@@@@@8_G1&lt;_G1&lt;_J @@@@@@@@@@@@@@@B _G1&lt;_A0@@@@@@@@@@AQ&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;X@@@@@@@@@B@_G1&lt;_G1&lt;_M@@@@@@@@@@,G1&lt;_G0@@@@@@@@@@MA&lt;_G1&lt;_G1&lt;_F0@@@@@@@@@0G1&lt;_J@@@@@@@@@@@E!&lt;_G1&lt;(@@@@@@@@@A&lt;_G1&lt;_G1&lt;_@@@@@@@@@@@@@@@@JA&lt;_G1&lt;^@@@@@@@@@@@$G1&lt;_G1&lt;_G1&lt;_G1&lt;_G3,@@@@@@@@@E!&lt;_G1&lt;_G1&lt;^@@@@@@@@@C,_G1&lt;1@@@@@@@@@@@UG1&lt;_G1&lt;_G2,@@@@@@@@@@B,_G1&lt;(@@@@@@@@@@@YG1&lt;_G2 @@@@@@@@NG1&lt;_G1&lt;_G1&lt;Y@@@@@@@@@@@N@@@(G1&lt;_G1&lt;@@@@@@@@@C @)G1&lt;_G1&lt;_G1&lt;_G1&lt;_D @@@@@N@@@@G1&lt;_G1&lt;_G20@@@@@C @@AQ&lt;_G2L@@@@@@@@@@AH_G1&lt;_G1&lt;_F0@@@@@@@@@KG1&lt;_G3D@@@@@@@@@@C\_G1&lt;_EP@@@@@@@@@_G1&lt;_G1&lt;_G1&lt;5@@@@@@@@@@@@@B _G1&lt;_G1,@@@@@@@@@@@@;G1&lt;_G1&lt;_LR _G1&lt;_MP@@@@@@@@@ZG1&lt;_G1&lt;;@@@@@@@@@@,_G1&lt;_B@@@@@@@@@@@B!&lt;_G1&lt;_G0P@@@@@@@@@@@T_G1&lt;_LP@@@@@@@@@@H1&lt;_G1&lt;O@@@@@@@@C!&lt;_G1&lt;_G1&lt;_G3D@C @@@@@@@@@@G1&lt;_G1&lt;_J@@@@@@N@@@@@@@NG#H"CP,@N1&lt;_G1&lt;;@@@@@@@@@@\1G1&lt;_E0@@@@@@@@@@B!&lt;_G1&lt; @@@@@@@@@@@JG1&lt;_B"$5@@@@@@@@@@@)G1&lt;_G1&lt;1@@@@@@@@@@@(G1&lt;_G1$@@@@@@@@SG1&lt;_G1&lt;_G1&lt;_G18@@@@@@@@@@@@_G1&lt;_G1&lt;_H @@@@@@@@@@@@@@@@@@@@@@G1&lt;_G1&lt;,@@@@@@@@@@@D@R0@@@@@@@@@@A\_G1&lt;_G3,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@E!&lt;_G1&lt;_G1H@@@@@@@@N@A&lt;_G1&lt;_IP@@@@@@@B\_G1&lt;_G1&lt;_G1&lt;_G0@@@@@@@@@@@A&lt;_G1&lt;_G1&lt;_E @@@@@@@@@@@@@@@@@@@@@RG1&lt;_G0(@@@@@@@@@@@@@C @@@@@@@@@;G1&lt;_G1&lt;_E 8@@@@@@@8@@@@@@@@@@@@@@@@@@C,_G1&lt;_G1&lt;_OP@@@@@@@@@@G1&lt;_G1&lt;9@@@@@@@@A!&lt;_G1&lt;_G1&lt;_G1&lt;_EP@@@@@@@@@@G1&lt;_G1&lt;_G1&lt;_N0@@@@@@@@@@@@@@@@@@@AX_G1&lt;_G00@@@@@@@@@@@@@@@@@@@@@E1&lt;_G1&lt;_G1&lt;0@@@@@@@@@@@@@@@@@@@@@@@@@B04G1&lt;_G1&lt;_G1&lt; @@@@@@8@@@@_G1&lt;_G1,@@@@@@@@ G1&lt;_G1&lt;_G1&lt;_G1&lt;_B0@@@@@@@BD_G1&lt;_G1&lt;_G1&lt;_H1 @@@@N@@@@@@@@@@@NJQ&lt;_G1&lt;_G1&lt;V@@@@@@@@@@@@@@@@@SD_G1&lt;_G1&lt;_G34D@@@@@@@N@@@@@@@@@@@@@BP G1&lt;_G1&lt;_G1&lt;_G0&lt;^G!8-G"4^E!&lt;_G1&lt;_M!8-G"4^G"L_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G"4^G!8-L!&lt;_G1&lt;_G1&lt;_G1&lt;_G1(;A@@@@@@@MRDMK!&lt;_G1&lt;_G1&lt;_G1&lt;1L#$5@@@@@B09JSD_G1&lt;_G1&lt;_G1&lt;_G1&lt;(BAP9F0@@@@@@@@@[LA$ZG1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;_G1&lt;b'))</body>

<body package="IBL" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Inspect' 				#nameKey: #inspect ) ) #(1 ) nil ) decodeAsLiteralArray</body>
</methods>

<methods>
<class-id>IBLBrowser class</class-id> <category>interface specs</category>

<body package="IBL" selector="windowSpecVW72">windowSpecVW72	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '2D IBL Testing Tool - INE5443 - Reconhecimento de Padrões - CCO/INE/CTC/UFSC' 			#min: #(#{Core.Point} 1210 773 ) 			#max: #(#{Core.Point} 1210 773 ) 			#bounds: #(#{Graphics.Rectangle} 541 160 1751 933 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 8 95 307 394 ) 					#name: #Subcanvas1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 310 95 609 394 ) 					#name: #Subcanvas2 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 613 95 912 394 ) 					#name: #Subcanvas3 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 8 69 ) 					#name: #Label1 					#label: 'Training Set' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 310 69 ) 					#name: #Label2 					#label: 'Training Result' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 613 69 ) 					#name: #Label3 					#label: 'Test Set Classification' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 328 409 584 431 ) 					#name: #ActionButton2 					#model: #trainWithData 					#label: 'Train with Data' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 632 401 884 432 ) 					#name: #ActionButton3 					#model: #testWithRandomData 					#helpText: 'Generate random points on the test field and classify them. Points may overlap.' 					#label: 'Test on Random Data' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 333 441 ) 					#name: #RadioButton1 					#model: #algorithm 					#label: 'IBL1' 					#select: #IBL1 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 333 462 ) 					#name: #RadioButton2 					#model: #algorithm 					#label: 'IBL2' 					#select: #IBL2 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 333 483 ) 					#name: #RadioButton3 					#model: #algorithm 					#label: 'IBL3' 					#select: #IBL3 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 22 406 278 433 ) 					#name: #ActionButton4 					#model: #generateNoisyDoubleSpiral 					#label: 'Generate Double Spiral' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 217 442 279 468 ) 					#name: #InputField1 					#flags: 0 					#model: #totalTraining 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 26 443 ) 					#name: #Label4 					#label: 'Total training patterns:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 519 439 582 466 ) 					#name: #InputField2 					#flags: 0 					#model: #correct 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 445 440 ) 					#name: #Label5 					#label: 'Correct:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 523 457 582 485 ) 					#name: #InputField3 					#flags: 0 					#model: #incorrect 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 435 460 ) 					#name: #Label6 					#label: 'Incorrect:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 27 472 ) 					#name: #Label7 					#label: 'Noise level:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 245 474 279 500 ) 					#name: #InputField4 					#model: #noise 					#type: #number 					#formatString: '00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 125 472 237 497 ) 					#name: #Slider1 					#model: #noise 					#orientation: #horizontal 					#start: 0 					#stop: 40 					#step: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 636 436 ) 					#name: #Label8 					#label: 'Iterations:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 838 438 891 463 ) 					#name: #InputField5 					#model: #iterations 					#type: #number 					#formatString: '000' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 725 436 834 463 ) 					#name: #Slider2 					#model: #iterations 					#orientation: #horizontal 					#start: 1 					#stop: 42000 					#step: 100 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 333 503 ) 					#name: #RadioButton4 					#model: #algorithm 					#label: 'IBL4' 					#select: #IBL4 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 632 462 884 493 ) 					#name: #ActionButton1 					#model: #testWithSystematicData 					#helpText: 'Fill area with systematically generated points (columnwise)' 					#label: 'Test on Systematic Data' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 104 503 ) 					#name: #RadioButton5 					#model: #dotsize 					#label: '4' 					#select: #'4' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 144 503 ) 					#name: #RadioButton6 					#model: #dotsize 					#label: '8' 					#select: #'8' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 27 500 ) 					#name: #Label10 					#label: 'Dot size:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 13 ) 					#name: #Label9 					#label: #logo 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 88 12 ) 					#name: #Label11 					#label: #incod 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 31 564 ) 					#name: #Label12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #yellow ) ) 					#label: ' Class 1 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 35 596 ) 					#name: #Label13 					#label: 'LAB:' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 179 596 ) 					#name: #Label14 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 79 593 177 624 ) 					#name: #InputField6 					#model: #lowerAcceptanceBoundary 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 223 593 321 624 ) 					#name: #InputField7 					#model: #upperAcceptanceBoundary 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 35 628 ) 					#name: #Label15 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 79 625 177 656 ) 					#name: #InputField8 					#model: #lowerDroppingBoundary 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 179 628 ) 					#name: #Label16 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 223 625 321 656 ) 					#name: #InputField9 					#model: #upperDroppingBoundary 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 31 660 ) 					#name: #Label17 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#label: ' Class 2 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 35 692 ) 					#name: #Label18 					#label: 'LAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 79 689 177 720 ) 					#name: #InputField10 					#model: #lowerAcceptanceBoundary2 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 179 692 ) 					#name: #Label19 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 223 689 321 720 ) 					#name: #InputField11 					#model: #upperAcceptanceBoundary2 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 35 724 ) 					#name: #Label20 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 79 721 177 752 ) 					#name: #InputField12 					#model: #lowerDroppingBoundary2 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Core.Point} 179 724 ) 					#name: #Label21 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 223 721 321 752 ) 					#name: #InputField13 					#model: #upperDroppingBoundary2 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 16 544 365 548 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 384 528 ) 					#name: #Label22 					#label: 'Advanced Training' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 552 544 901 548 ) 					#name: #Divider2 ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 613 593 912 765 ) 					#name: #List1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 8191 ) ) 					#model: #list 					#tabable: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 920 96 1200 765 ) 					#name: #TextEditor1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 8191 ) ) 					#model: #transcript 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 925 69 ) 					#name: #Label23 					#label: 'Running Transcript' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 1123 6 1206 26 ) 					#name: #ActionButton5 					#model: #inspect 					#label: 'Debug' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 416 503 ) 					#name: #CheckBox1 					#model: #stepwise 					#label: 'Stepwise' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 528 503 ) 					#name: #CheckBox2 					#model: #verbose 					#label: 'Verbose' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 616 568 ) 					#name: #Label24 					#label: 'Training Data' ) ) ) )</body>

<body package="IBL" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '2D IBL Testing Tool - INE5443 - Reconhecimento de Padrões - CCO/INE/CTC/UFSC' 			#min: #(#{Core.Point} 1210 773 ) 			#max: #(#{Core.Point} 1210 773 ) 			#bounds: #(#{Graphics.Rectangle} 2275 154 3485 927 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 8 0 904 0 64 0 ) 					#name: #GroupBox5 ) 				#(#{UI.GroupBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 12 0 668 0 274 0 744 0 ) 					#name: #GroupBoxClass2 ) 				#(#{UI.GroupBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 12 0 572 0 274 0 648 0 ) 					#name: #GroupBoxClass1 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 324 0 444 0 388 0 520 0 ) 					#name: #GroupBox3 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 292 0 664 0 532 0 755 0 ) 					#name: #GroupBox2 					#label: 'z-Values for Frequency Intervals' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 292 0 564 0 532 0 655 0 ) 					#name: #GroupBox1 					#label: 'z-Values for Precision Intervals' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 632 0 436 0 784 0 512 0 ) 					#name: #GroupBox4 					#label: 'Policy for Non Accep.' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 95 0 307 0 394 0 ) 					#name: #Subcanvas1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 310 0 95 0 609 0 394 0 ) 					#name: #Subcanvas2 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 613 0 95 0 912 0 394 0 ) 					#name: #Subcanvas3 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0 69 0 ) 					#name: #Label1 					#label: 'Training Set' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 310 0 69 0 ) 					#name: #Label2 					#label: 'Training Result' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 613 0 69 0 ) 					#name: #Label3 					#label: 'Test Set Classification' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 328 0 409 0 584 0 431 0 ) 					#name: #ActionButton2 					#model: #trainWithData 					#helpText: 'Train employing the selected IB Algorithm' 					#label: 'Train' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 453 0 ) 					#name: #RadioButton1 					#model: #algorithm 					#label: 'IBL1' 					#select: #IBL1 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 474 0 ) 					#name: #RadioButton2 					#model: #algorithm 					#label: 'IBL2' 					#select: #IBL2 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 495 0 ) 					#name: #RadioButton3 					#model: #algorithm 					#label: 'IBL3' 					#select: #IBL3 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 22 0 406 0 278 0 433 0 ) 					#name: #ActionButton4 					#model: #generateNoisyDoubleSpiral 					#label: 'Generate Double Spiral' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 153 0 445 0 183 0 460 0 ) 					#name: #InputField1 					#flags: 0 					#model: #totalTraining 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 26 0 443 0 ) 					#name: #Label4 					#label: 'Total training patterns:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 478 0 440 0 502 0 455 0 ) 					#name: #InputField2 					#flags: 0 					#model: #correct 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 429 0 440 0 ) 					#name: #Label5 					#label: 'Correct:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 478 0 460 0 502 0 475 0 ) 					#name: #InputField3 					#flags: 0 					#model: #incorrect 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 419 0 460 0 ) 					#name: #Label6 					#label: 'Incorrect:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 468 0 ) 					#name: #Label7 					#label: 'Noise level:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 277 0 521 0 305 0 536 0 ) 					#name: #InputField4 					#flags: 0 					#model: #sigma 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed' 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 469 0 270 0 488 0 ) 					#name: #Slider1 					#model: #noise 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed.' 					#orientation: #horizontal 					#start: 0 					#stop: 80 					#step: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 632 0 408 0 884 0 429 0 ) 					#name: #ActionButton1 					#model: #testWithSystematicData 					#helpText: 'Fill area with systematically generated points (columnwise), determining the decision surfaces.' 					#label: 'Test' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 100 0 519 0 ) 					#name: #RadioButton5 					#model: #dotsize 					#label: '4' 					#select: #'4' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 136 0 519 0 ) 					#name: #RadioButton6 					#model: #dotsize 					#label: '8' 					#select: #'8' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 516 0 ) 					#name: #Label10 					#label: 'Dot size:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 13 0 13 0 ) 					#name: #Label9 					#label: #logo 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 88 0 12 0 ) 					#name: #Label11 					#label: #incod 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 576 0 ) 					#name: #Label12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #yellow ) ) 					#label: ' Class 1 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 600 0 ) 					#name: #Label13 					#label: 'LAB:' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 600 0 ) 					#name: #Label14 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 601 0 133 0 616 0 ) 					#name: #InputField6 					#flags: 0 					#isOpaque: true 					#model: #lowerAcceptanceBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 601 0 269 0 616 0 ) 					#name: #InputField7 					#flags: 0 					#isOpaque: true 					#model: #upperAcceptanceBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 624 0 ) 					#name: #Label15 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 625 0 133 0 640 0 ) 					#name: #InputField8 					#flags: 0 					#isOpaque: true 					#model: #lowerDroppingBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 624 0 ) 					#name: #Label16 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 625 0 269 0 640 0 ) 					#name: #InputField9 					#flags: 0 					#isOpaque: true 					#model: #upperDroppingBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 672 0 ) 					#name: #Label17 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#label: ' Class 2 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 696 0 ) 					#name: #Label18 					#label: 'LAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 697 0 133 0 712 0 ) 					#name: #InputField10 					#flags: 0 					#isOpaque: true 					#model: #lowerAcceptanceBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 696 0 ) 					#name: #Label19 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 697 0 269 0 712 0 ) 					#name: #InputField11 					#flags: 0 					#isOpaque: true 					#model: #upperAcceptanceBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 720 0 ) 					#name: #Label20 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 721 0 133 0 736 0 ) 					#name: #InputField12 					#flags: 0 					#isOpaque: true 					#model: #lowerDroppingBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 720 0 ) 					#name: #Label21 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 721 0 269 0 736 0 ) 					#name: #InputField13 					#flags: 0 					#isOpaque: true 					#model: #upperDroppingBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 24 0 544 0 365 0 548 0 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 400 0 536 0 ) 					#name: #Label22 					#label: 'Advanced Training' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 552 0 544 0 901 0 548 0 ) 					#name: #Divider2 ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 543 0 593 0 912 0 765 0 ) 					#name: #List1 					#flags: 15 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 8191 ) ) 					#model: #list 					#tabable: true 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 920 0 96 0 1200 0 765 0 ) 					#name: #transcript 					#flags: 0 					#majorKey: #{VisualTranscript} 					#minorKey: #windowSpec 					#clientKey: #transcriptView ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 925 0 69 0 ) 					#name: #Label23 					#label: 'Running Transcript' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1123 0 6 0 1206 0 26 0 ) 					#name: #ActionButton5 					#model: #inspect 					#label: 'Debug' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 416 0 483 0 ) 					#name: #CheckBox1 					#model: #stepwise 					#label: 'Stepwise' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 528 0 483 0 ) 					#name: #CheckBox2 					#model: #verbose 					#label: 'Verbose' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 548 0 568 0 ) 					#name: #Label24 					#label: 'Data:' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 416 0 503 0 ) 					#name: #CheckBox3 					#model: #allowDropping 					#label: 'Allow dropping' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 528 0 503 0 ) 					#name: #CheckBox4 					#model: #acceptPatternsWithN0 					#label: 'Accept n=0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 440 0 ) 					#name: #Label8 					#label: '|CD|:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 832 0 441 0 860 0 456 0 ) 					#name: #InputField5 					#flags: 0 					#isOpaque: true 					#model: #CDsize 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 589 0 ) 					#name: #Label25 					#label: 'Acceptance:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 589 0 520 0 604 0 ) 					#name: #InputField14 					#flags: 0 					#model: #acceptanceCI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 589 0 488 0 608 0 ) 					#name: #Slider2 					#model: #acceptanceCIslider 					#orientation: #horizontal 					#start: 0 					#stop: 150 					#step: 5 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 621 0 520 0 636 0 ) 					#name: #InputField15 					#flags: 0 					#model: #droppingCI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 621 0 488 0 640 0 ) 					#name: #Slider3 					#model: #droppingCIslider 					#orientation: #horizontal 					#start: 0 					#stop: 150 					#step: 5 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 621 0 ) 					#name: #Label26 					#label: 'Dropping' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 721 0 ) 					#name: #Label27 					#label: 'Dropping' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 689 0 ) 					#name: #Label28 					#label: 'Acceptance:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 689 0 488 0 708 0 ) 					#name: #Slider4 					#model: #acceptanceFIslider 					#orientation: #horizontal 					#start: 0 					#stop: 150 					#step: 5 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 689 0 520 0 704 0 ) 					#name: #InputField16 					#flags: 0 					#model: #acceptanceFI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 721 0 520 0 736 0 ) 					#name: #InputField17 					#flags: 0 					#model: #droppingFI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 721 0 488 0 740 0 ) 					#name: #Slider5 					#model: #droppingFIslider 					#orientation: #horizontal 					#start: 0 					#stop: 150 					#step: 5 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 460 0 ) 					#name: #Label29 					#label: 'Acceptables:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 872 0 461 0 900 0 476 0 ) 					#name: #InputField18 					#flags: 0 					#isOpaque: true 					#model: #acceptables 					#type: #number 					#formatString: '000' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 588 0 568 0 ) 					#name: #RadioButton7 					#model: #dataset 					#helpText: 'Show training set' 					#label: 'Training' 					#select: #train ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 820 0 568 0 ) 					#name: #RadioButton8 					#model: #dataset 					#helpText: 'Show concept descriptor (learned patterns)' 					#label: 'CD' 					#select: #cd ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 480 0 ) 					#name: #DroppedLabel 					#label: 'Dropped:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 872 0 481 0 900 0 496 0 ) 					#name: #DroppedFiled 					#flags: 0 					#isOpaque: true 					#model: #dropped 					#type: #number 					#formatString: '000' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 660 0 568 0 ) 					#name: #RadioButton9 					#model: #dataset 					#helpText: 'Show yet untrained patterns' 					#label: 'Untrained' 					#select: #trainBuffer ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 744 0 568 0 ) 					#name: #RadioButton4 					#model: #dataset 					#helpText: 'Show learned patterns that have been dropped from the CD' 					#label: 'Dropped' 					#select: #dropped ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 123 0 577 0 148 0 592 0 ) 					#name: #instancesClass1 					#flags: 0 					#isOpaque: true 					#model: #instancesClass1 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 63 0 576 0 ) 					#name: #instancesLabelClass1 					#label: 'Instances:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 211 0 577 0 236 0 592 0 ) 					#name: #droppedClass1 					#flags: 0 					#isOpaque: true 					#model: #droppedClass1 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 576 0 ) 					#name: #droppedLabelClass1 					#label: 'Dropped:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 123 0 673 0 148 0 688 0 ) 					#name: #instancesClass2 					#flags: 0 					#isOpaque: true 					#model: #instancesClass2 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 63 0 672 0 ) 					#name: #instancesLabelClass2 					#label: 'Instances:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 211 0 673 0 236 0 688 0 ) 					#name: #droppedClass2 					#flags: 0 					#isOpaque: true 					#model: #droppedClass2 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 672 0 ) 					#name: #droppedLabelClass2 					#label: 'Dropped:' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 100 0 495 0 ) 					#name: #RadioButton10 					#model: #probabilityDistribution 					#label: 'uniform' 					#select: #uniform ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 176 0 495 0 ) 					#name: #RadioButton11 					#model: #probabilityDistribution 					#helpText: 'Generates noise with normal distribution and sigma = 0.398942. This will make gaus(x) = 1.0 for x = 0. Input are random numbers between 0.0 and 0.5.' 					#label: 'normally distributed' 					#select: #normal ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 492 0 ) 					#name: #Label30 					#label: 'Probability:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 197 0 517 0 270 0 536 0 ) 					#name: #sigmaSlider 					#model: #sigmaSlider 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed.' 					#orientation: #horizontal 					#start: 300 					#stop: 500 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 277 0 473 0 296 0 488 0 ) 					#name: #InputField19 					#flags: 0 					#model: #noise 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed' 					#type: #number 					#formatString: '00' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 184 0 516 0 ) 					#name: #Label31 					#label: 's' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 644 0 464 0 ) 					#name: #RadioButton12 					#model: #policy 					#label: 'first' 					#select: #first ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 696 0 464 0 ) 					#name: #RadioButton13 					#model: #policy 					#label: 'random' 					#select: #random ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 312 0 36 0 ) 					#name: #Label32 					#label: 'INE 5443 - Reconhecimento de Padrões - CCO/INE/CTC/UFSC' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 312 0 12 0 ) 					#name: #Label33 					#label: '2D IBL Testing Tool' 					#style: #large ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 644 0 488 0 ) 					#name: #RadioButton14 					#model: #policy 					#label: 'weighted probability' 					#select: #weighted ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0 756 0 ) 					#name: #Label34 					#label: '(c) Copyright 2002 - 2015 www.incod.ufsc.br' 					#style: #pixelSmall ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1035 0 5 0 1118 0 26 0 ) 					#name: #ActionButton3 					#model: #about 					#label: 'About' 					#isDefault: true 					#defaultable: true ) ) ) )</body>

<body package="IBL" selector="windowSpecTextCollector">windowSpecTextCollector	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '2D IBL Testing Tool - INE5443 - Reconhecimento de Padrões - CCO/INE/CTC/UFSC' 			#min: #(#{Core.Point} 1210 773 ) 			#max: #(#{Core.Point} 1210 773 ) 			#bounds: #(#{Graphics.Rectangle} 563 105 1773 878 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) 				#setBorderColor: #(#{Graphics.ColorValue} #black ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 8 0 904 0 64 0 ) 					#name: #GroupBox5 ) 				#(#{UI.GroupBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 12 0 668 0 274 0 744 0 ) 					#name: #GroupBoxClass2 ) 				#(#{UI.GroupBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 12 0 572 0 274 0 648 0 ) 					#name: #GroupBoxClass1 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 324 0 444 0 388 0 520 0 ) 					#name: #GroupBox3 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 292 0 664 0 532 0 755 0 ) 					#name: #GroupBox2 					#label: 'z-Values for Frequency Intervals' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 292 0 564 0 532 0 655 0 ) 					#name: #GroupBox1 					#label: 'z-Values for Precision Intervals' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 632 0 436 0 784 0 512 0 ) 					#name: #GroupBox4 					#label: 'Policy for Non Accep.' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 95 0 307 0 394 0 ) 					#name: #Subcanvas1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 310 0 95 0 609 0 394 0 ) 					#name: #Subcanvas2 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 613 0 95 0 912 0 394 0 ) 					#name: #Subcanvas3 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #black ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0 69 0 ) 					#name: #Label1 					#label: 'Training Set' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 310 0 69 0 ) 					#name: #Label2 					#label: 'Training Result' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 613 0 69 0 ) 					#name: #Label3 					#label: 'Test Set Classification' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 328 0 409 0 584 0 431 0 ) 					#name: #ActionButton2 					#model: #trainWithData 					#helpText: 'Train employing the selected IB Algorithm' 					#label: 'Train' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 453 0 ) 					#name: #RadioButton1 					#model: #algorithm 					#label: 'IBL1' 					#select: #IBL1 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 474 0 ) 					#name: #RadioButton2 					#model: #algorithm 					#label: 'IBL2' 					#select: #IBL2 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 333 0 495 0 ) 					#name: #RadioButton3 					#model: #algorithm 					#label: 'IBL3' 					#select: #IBL3 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 22 0 406 0 278 0 433 0 ) 					#name: #ActionButton4 					#model: #generateNoisyDoubleSpiral 					#label: 'Generate Double Spiral' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 153 0 445 0 183 0 460 0 ) 					#name: #InputField1 					#flags: 0 					#model: #totalTraining 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 26 0 443 0 ) 					#name: #Label4 					#label: 'Total training patterns:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 478 0 440 0 502 0 455 0 ) 					#name: #InputField2 					#flags: 0 					#model: #correct 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 429 0 440 0 ) 					#name: #Label5 					#label: 'Correct:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 478 0 460 0 502 0 475 0 ) 					#name: #InputField3 					#flags: 0 					#model: #incorrect 					#alignment: #right 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 419 0 460 0 ) 					#name: #Label6 					#label: 'Incorrect:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 468 0 ) 					#name: #Label7 					#label: 'Noise level:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 277 0 521 0 305 0 536 0 ) 					#name: #InputField4 					#flags: 0 					#model: #sigma 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed' 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 469 0 270 0 488 0 ) 					#name: #Slider1 					#model: #noise 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed.' 					#orientation: #horizontal 					#start: 0 					#stop: 80 					#step: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 632 0 408 0 884 0 429 0 ) 					#name: #ActionButton1 					#model: #testWithSystematicData 					#helpText: 'Fill area with systematically generated points (columnwise), determining the decision surfaces.' 					#label: 'Test' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 100 0 519 0 ) 					#name: #RadioButton5 					#model: #dotsize 					#label: '4' 					#select: #'4' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 136 0 519 0 ) 					#name: #RadioButton6 					#model: #dotsize 					#label: '8' 					#select: #'8' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 516 0 ) 					#name: #Label10 					#label: 'Dot size:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 13 0 13 0 ) 					#name: #Label9 					#label: #logo 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 88 0 12 0 ) 					#name: #Label11 					#label: #incod 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 576 0 ) 					#name: #Label12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #yellow ) ) 					#label: ' Class 1 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 600 0 ) 					#name: #Label13 					#label: 'LAB:' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 600 0 ) 					#name: #Label14 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 601 0 133 0 616 0 ) 					#name: #InputField6 					#flags: 0 					#isOpaque: true 					#model: #lowerAcceptanceBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 601 0 269 0 616 0 ) 					#name: #InputField7 					#flags: 0 					#isOpaque: true 					#model: #upperAcceptanceBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 624 0 ) 					#name: #Label15 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 625 0 133 0 640 0 ) 					#name: #InputField8 					#flags: 0 					#isOpaque: true 					#model: #lowerDroppingBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 624 0 ) 					#name: #Label16 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 625 0 269 0 640 0 ) 					#name: #InputField9 					#flags: 0 					#isOpaque: true 					#model: #upperDroppingBoundary 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 672 0 ) 					#name: #Label17 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#label: ' Class 2 ' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 696 0 ) 					#name: #Label18 					#label: 'LAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 697 0 133 0 712 0 ) 					#name: #InputField10 					#flags: 0 					#isOpaque: true 					#model: #lowerAcceptanceBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 696 0 ) 					#name: #Label19 					#label: 'UAB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 697 0 269 0 712 0 ) 					#name: #InputField11 					#flags: 0 					#isOpaque: true 					#model: #upperAcceptanceBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 19 0 720 0 ) 					#name: #Label20 					#label: 'LDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 55 0 721 0 133 0 736 0 ) 					#name: #InputField12 					#flags: 0 					#isOpaque: true 					#model: #lowerDroppingBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 720 0 ) 					#name: #Label21 					#label: 'UDB:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 191 0 721 0 269 0 736 0 ) 					#name: #InputField13 					#flags: 0 					#isOpaque: true 					#model: #upperDroppingBoundary2 					#isReadOnly: true 					#type: #number 					#formatString: '00.000000' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 24 0 544 0 365 0 548 0 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 400 0 536 0 ) 					#name: #Label22 					#label: 'Advanced Training' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 552 0 544 0 901 0 548 0 ) 					#name: #Divider2 ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 543 0 593 0 912 0 765 0 ) 					#name: #List1 					#flags: 15 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 8191 ) ) 					#model: #list 					#tabable: true 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 920 0 96 0 1200 0 765 0 ) 					#name: #TextEditor1 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 8191 ) ) 					#model: #transcript 					#helpText: 'Transcript of the classification attempt of one new pattern.' 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 925 0 69 0 ) 					#name: #Label23 					#label: 'Running Transcript' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1123 0 6 0 1206 0 26 0 ) 					#name: #ActionButton5 					#model: #inspect 					#label: 'Debug' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 416 0 483 0 ) 					#name: #CheckBox1 					#model: #stepwise 					#label: 'Stepwise' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 528 0 483 0 ) 					#name: #CheckBox2 					#model: #verbose 					#label: 'Verbose' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 548 0 568 0 ) 					#name: #Label24 					#label: 'Data:' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 416 0 503 0 ) 					#name: #CheckBox3 					#model: #allowDropping 					#label: 'Allow dropping' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 528 0 503 0 ) 					#name: #CheckBox4 					#model: #acceptPatternsWithN0 					#label: 'Accept n=0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 440 0 ) 					#name: #Label8 					#label: '|CD|:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 832 0 441 0 860 0 456 0 ) 					#name: #InputField5 					#flags: 0 					#isOpaque: true 					#model: #CDsize 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 589 0 ) 					#name: #Label25 					#label: 'Acceptance:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 589 0 520 0 604 0 ) 					#name: #InputField14 					#flags: 0 					#model: #acceptanceCI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 589 0 488 0 608 0 ) 					#name: #Slider2 					#model: #acceptanceCIslider 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 5 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 621 0 520 0 636 0 ) 					#name: #InputField15 					#flags: 0 					#model: #droppingCI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 621 0 488 0 640 0 ) 					#name: #Slider3 					#model: #droppingCIslider 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 5 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 621 0 ) 					#name: #Label26 					#label: 'Dropping' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 721 0 ) 					#name: #Label27 					#label: 'Dropping' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 303 0 689 0 ) 					#name: #Label28 					#label: 'Acceptance:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 689 0 488 0 708 0 ) 					#name: #Slider4 					#model: #acceptanceFIslider 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 5 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 689 0 520 0 704 0 ) 					#name: #InputField16 					#flags: 0 					#model: #acceptanceFI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 496 0 721 0 520 0 736 0 ) 					#name: #InputField17 					#flags: 0 					#model: #droppingFI 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 381 0 721 0 488 0 740 0 ) 					#name: #Slider5 					#model: #droppingFIslider 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 5 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 460 0 ) 					#name: #Label29 					#label: 'Acceptables:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 872 0 461 0 900 0 476 0 ) 					#name: #InputField18 					#flags: 0 					#isOpaque: true 					#model: #acceptables 					#type: #number 					#formatString: '000' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 588 0 568 0 ) 					#name: #RadioButton7 					#model: #dataset 					#helpText: 'Show training set' 					#label: 'Training' 					#select: #train ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 820 0 568 0 ) 					#name: #RadioButton8 					#model: #dataset 					#helpText: 'Show concept descriptor (learned patterns)' 					#label: 'CD' 					#select: #cd ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 796 0 480 0 ) 					#name: #DroppedLabel 					#label: 'Dropped:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 872 0 481 0 900 0 496 0 ) 					#name: #DroppedFiled 					#flags: 0 					#isOpaque: true 					#model: #dropped 					#type: #number 					#formatString: '000' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 660 0 568 0 ) 					#name: #RadioButton9 					#model: #dataset 					#helpText: 'Show yet untrained patterns' 					#label: 'Untrained' 					#select: #trainBuffer ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 744 0 568 0 ) 					#name: #RadioButton4 					#model: #dataset 					#helpText: 'Show learned patterns that have been dropped from the CD' 					#label: 'Dropped' 					#select: #dropped ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 123 0 577 0 148 0 592 0 ) 					#name: #instancesClass1 					#flags: 0 					#isOpaque: true 					#model: #instancesClass1 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 63 0 576 0 ) 					#name: #instancesLabelClass1 					#label: 'Instances:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 211 0 577 0 236 0 592 0 ) 					#name: #droppedClass1 					#flags: 0 					#isOpaque: true 					#model: #droppedClass1 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 576 0 ) 					#name: #droppedLabelClass1 					#label: 'Dropped:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 123 0 673 0 148 0 688 0 ) 					#name: #instancesClass2 					#flags: 0 					#isOpaque: true 					#model: #instancesClass2 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 63 0 672 0 ) 					#name: #instancesLabelClass2 					#label: 'Instances:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 211 0 673 0 236 0 688 0 ) 					#name: #droppedClass2 					#flags: 0 					#isOpaque: true 					#model: #droppedClass2 					#isReadOnly: true 					#type: #number 					#formatString: '000' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #anchorType #anchorDestination ) 					#layout: #(#{Graphics.LayoutOrigin} 155 0 672 0 ) 					#name: #droppedLabelClass2 					#label: 'Dropped:' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 100 0 495 0 ) 					#name: #RadioButton10 					#model: #probabilityDistribution 					#label: 'uniform' 					#select: #uniform ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 176 0 495 0 ) 					#name: #RadioButton11 					#model: #probabilityDistribution 					#helpText: 'Generates noise with normal distribution and sigma = 0.398942. This will make gaus(x) = 1.0 for x = 0. Input are random numbers between 0.0 and 0.5.' 					#label: 'normally distributed' 					#select: #normal ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 492 0 ) 					#name: #Label30 					#label: 'Probability:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 197 0 517 0 270 0 536 0 ) 					#name: #sigmaSlider 					#model: #sigmaSlider 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed.' 					#orientation: #horizontal 					#start: 300 					#stop: 500 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 277 0 473 0 296 0 488 0 ) 					#name: #InputField19 					#flags: 0 					#model: #noise 					#helpText: 'Maximum amount of deviation expressed in pixel. Normally or uniformly distributed' 					#type: #number 					#formatString: '00' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 184 0 516 0 ) 					#name: #Label31 					#label: 's' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 644 0 464 0 ) 					#name: #RadioButton12 					#model: #policy 					#label: 'first' 					#select: #first ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 696 0 464 0 ) 					#name: #RadioButton13 					#model: #policy 					#label: 'random' 					#select: #random ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 312 0 36 0 ) 					#name: #Label32 					#label: 'INE 5443 - Reconhecimento de Padrões - CCO/INE/CTC/UFSC' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 312 0 12 0 ) 					#name: #Label33 					#label: '2D IBL Testing Tool' 					#style: #large ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 644 0 488 0 ) 					#name: #RadioButton14 					#model: #policy 					#label: 'weighted probability' 					#select: #weighted ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 8 0 756 0 ) 					#name: #Label34 					#label: '(c) Copyright 2002 - 2015 www.incod.ufsc.br' 					#style: #pixelSmall ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1035 0 5 0 1118 0 26 0 ) 					#name: #ActionButton3 					#model: #about 					#label: 'About' 					#isDefault: true 					#defaultable: true ) ) ) )</body>
</methods>


<methods>
<class-id>IBLBrowser</class-id> <category>aspects</category>

<body package="IBL" selector="verbose">verbose	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^verbose isNil		ifTrue:			[verbose := true asValue]		ifFalse:			[verbose]</body>

<body package="IBL" selector="sigmaSlider">sigmaSlider	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sigmaSlider isNil		ifTrue:			[sigmaSlider := 399 asValue]		ifFalse:			[sigmaSlider]</body>

<body package="IBL" selector="policy">policy	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^policy isNil		ifTrue:			[policy := #random asValue]		ifFalse:			[policy]</body>

<body package="IBL" selector="dataset">dataset	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dataset isNil		ifTrue:			[dataset := #train asValue]		ifFalse:			[dataset]</body>

<body package="IBL" selector="acceptPatternsWithN0">acceptPatternsWithN0	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptPatternsWithN0 isNil		ifTrue:			[acceptPatternsWithN0 := true asValue]		ifFalse:			[acceptPatternsWithN0]</body>

<body package="IBL" selector="algorithm">algorithm	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^algorithm isNil		ifTrue:			[algorithm := #IBL1 asValue]		ifFalse:			[algorithm]</body>

<body package="IBL" selector="allowDropping">allowDropping	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^allowDropping isNil		ifTrue:			[allowDropping := false asValue]		ifFalse:			[allowDropping]</body>

<body package="IBL" selector="stepwise">stepwise	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^stepwise isNil		ifTrue:			[stepwise := true asValue]		ifFalse:			[stepwise]</body>

<body package="IBL" selector="upperDroppingBoundary2">upperDroppingBoundary2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^upperDroppingBoundary2 isNil		ifTrue:			[upperDroppingBoundary2 := 0.0 asValue]		ifFalse:			[upperDroppingBoundary2]</body>

<body package="IBL" selector="iterations">iterations	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^iterations isNil		ifTrue:			[iterations := 1 asValue]		ifFalse:			[iterations]</body>

<body package="IBL" selector="droppingCI">droppingCI	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppingCI isNil		ifTrue:			[droppingCI := 0.95 asValue]		ifFalse:			[droppingCI]</body>

<body package="IBL" selector="acceptanceCIslider">acceptanceCIslider	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptanceCIslider isNil		ifTrue:			[acceptanceCIslider := 50 asValue]		ifFalse:			[acceptanceCIslider]</body>

<body package="IBL" selector="upperAcceptanceBoundary2">upperAcceptanceBoundary2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^upperAcceptanceBoundary2 isNil		ifTrue:			[upperAcceptanceBoundary2 := 0.0 asValue]		ifFalse:			[upperAcceptanceBoundary2]</body>

<body package="IBL" selector="CDsize">CDsize	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^CDsize isNil		ifTrue:			[CDsize := 0 asValue]		ifFalse:			[CDsize]</body>

<body package="IBL" selector="lowerAcceptanceBoundary">lowerAcceptanceBoundary	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lowerAcceptanceBoundary isNil		ifTrue:			[lowerAcceptanceBoundary := 0.0 asValue]		ifFalse:			[lowerAcceptanceBoundary]</body>

<body package="IBL" selector="probabilityDistribution">probabilityDistribution	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^probabilityDistribution isNil		ifTrue:			[probabilityDistribution := #uniform asValue]		ifFalse:			[probabilityDistribution]</body>

<body package="IBL" selector="transcript">transcript	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^transcript isNil		ifTrue:			[transcript := TextCollector new asValue]		ifFalse:			[transcript]</body>

<body package="IBL" selector="transcriptView">transcriptView	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^transcriptView isNil		ifTrue:			[transcriptView := VisualTranscript new.			 transcriptView transcript: self transcript.]		ifFalse:			[transcriptView]</body>

<body package="IBL" selector="droppingFI">droppingFI	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppingFI isNil		ifTrue:			[droppingFI := 0.95 asValue]		ifFalse:			[droppingFI]</body>

<body package="IBL" selector="droppedClass1">droppedClass1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppedClass1 isNil		ifTrue:			[droppedClass1 := 0 asValue]		ifFalse:			[droppedClass1]</body>

<body package="IBL" selector="upperAcceptanceBoundary">upperAcceptanceBoundary	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^upperAcceptanceBoundary isNil		ifTrue:			[upperAcceptanceBoundary := 0.0 asValue]		ifFalse:			[upperAcceptanceBoundary]</body>

<body package="IBL" selector="droppingCIslider">droppingCIslider	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppingCIslider isNil		ifTrue:			[droppingCIslider := 95 asValue]		ifFalse:			[droppingCIslider]</body>

<body package="IBL" selector="instancesClass2">instancesClass2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instancesClass2 isNil		ifTrue:			[instancesClass2 := 0 asValue]		ifFalse:			[instancesClass2]</body>

<body package="IBL" selector="dotsize">dotsize	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dotsize isNil		ifTrue:			[dotsize := #'4' asValue]		ifFalse:			[dotsize]</body>

<body package="IBL" selector="acceptables">acceptables	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptables isNil		ifTrue:			[acceptables := 0 asValue]		ifFalse:			[acceptables]</body>

<body package="IBL" selector="lowerDroppingBoundary2">lowerDroppingBoundary2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lowerDroppingBoundary2 isNil		ifTrue:			[lowerDroppingBoundary2 := 0.0 asValue]		ifFalse:			[lowerDroppingBoundary2]</body>

<body package="IBL" selector="lowerDroppingBoundary">lowerDroppingBoundary	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lowerDroppingBoundary isNil		ifTrue:			[lowerDroppingBoundary := 0.0 asValue]		ifFalse:			[lowerDroppingBoundary]</body>

<body package="IBL" selector="sigma">sigma	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sigma isNil		ifTrue:			[sigma := 0.398942 asValue]		ifFalse:			[sigma]</body>

<body package="IBL" selector="upperDroppingBoundary">upperDroppingBoundary	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^upperDroppingBoundary isNil		ifTrue:			[upperDroppingBoundary := 0.0 asValue]		ifFalse:			[upperDroppingBoundary]</body>

<body package="IBL" selector="correct">correct	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^correct isNil		ifTrue:			[correct := 0 asValue]		ifFalse:			[correct]</body>

<body package="IBL" selector="droppedClass2">droppedClass2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppedClass2 isNil		ifTrue:			[droppedClass2 := 0 asValue]		ifFalse:			[droppedClass2]</body>

<body package="IBL" selector="droppingFIslider">droppingFIslider	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^droppingFIslider isNil		ifTrue:			[droppingFIslider := 95 asValue]		ifFalse:			[droppingFIslider]</body>

<body package="IBL" selector="instancesClass1">instancesClass1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instancesClass1 isNil		ifTrue:			[instancesClass1 := 0 asValue]		ifFalse:			[instancesClass1]</body>

<body package="IBL" selector="incorrect">incorrect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^incorrect isNil		ifTrue:			[incorrect := 0 asValue]		ifFalse:			[incorrect]</body>

<body package="IBL" selector="dropped">dropped	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dropped isNil		ifTrue:			[dropped := 0 asValue]		ifFalse:			[dropped]</body>

<body package="IBL" selector="lowerAcceptanceBoundary2">lowerAcceptanceBoundary2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lowerAcceptanceBoundary2 isNil		ifTrue:			[lowerAcceptanceBoundary2 := 0.0 asValue]		ifFalse:			[lowerAcceptanceBoundary2]</body>

<body package="IBL" selector="noise">noise	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^noise isNil		ifTrue:			[noise := 0 asValue]		ifFalse:			[noise]</body>

<body package="IBL" selector="totalTraining">totalTraining	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^totalTraining isNil		ifTrue:			[totalTraining := 0 asValue]		ifFalse:			[totalTraining]</body>

<body package="IBL" selector="acceptanceFIslider">acceptanceFIslider	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptanceFIslider isNil		ifTrue:			[acceptanceFIslider := 50 asValue]		ifFalse:			[acceptanceFIslider]</body>

<body package="IBL" selector="list">list	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^list isNil		ifTrue:			[list := SelectionInList new.			"Show the training set in the list."			 list list: train]		ifFalse:			[list]</body>

<body package="IBL" selector="acceptanceCI">acceptanceCI	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptanceCI isNil		ifTrue:			[acceptanceCI := 0.5 asValue]		ifFalse:			[acceptanceCI]</body>

<body package="IBL" selector="acceptanceFI">acceptanceFI	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^acceptanceFI isNil		ifTrue:			[acceptanceFI := 0.5 asValue]		ifFalse:			[acceptanceFI]</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>interface opening</category>

<body package="IBL" selector="postOpenWith:">postOpenWith: aBuilder 	"This message is sent by the builder when it has completed work on 	either a complete window or a SubCanvas."		super postOpenWith: aBuilder.</body>

<body package="IBL" selector="postBuildWith:">postBuildWith: aBuilder 	"This message is sent by the builder when it has completed work on 	either a complete window or a SubCanvas."		super postBuildWith: aBuilder.		self droppingCIslider onChangeSend: #droppingCIchanged to: self.	self droppingFIslider onChangeSend: #droppingFIchanged to: self.	self acceptanceCIslider onChangeSend: #acceptanceCIchanged to: self.	self acceptanceFIslider onChangeSend: #acceptanceFIchanged to: self.		self sigmaSlider onChangeSend: #sigmaChanged to: self.	self dataset onChangeSend: #datasetChanged to: self.</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>multiple choice dialogs</category>

<body package="IBL" selector="question">question	|answer|	answer := Dialog		choose: 'Continue simulating step-by-step?'		labels: (Array with: 'yes' with: 'continue nonstop' with: 'continue silently' with: 'inspect')		values: #(#yes #no #silent #inspect)		default: #yes.	(answer = #no) ifTrue: [self stepwise value: false].	(answer = #silent) ifTrue: [self stepwise value: false. self verbose value: false].	(answer = #inspect) ifTrue: [self halt].</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>ibls</category>

<body package="IBL" selector="processDroppingsFor:">processDroppingsFor: aGC	| droppings |	"Used in IB3, IB4 and IB5"		"Sort through all patterns in the CD and check if each 	 should be dropped or not.		 Drop all that turn out to be dropable.		 For the sake of traceability, instead of deleting them,	 we will move them to the droppedCollection, an instance 	 variable of IBLBrowser that collects droppings."		droppings := cd select: [:aPattern | aPattern dropableAt: self].	"Lets remove the droppings AND adjust the instances values of 	 the class of each dropped pattern."	droppings do: [:aDroppedPattern |		aDroppedPattern myClass instances: (aDroppedPattern myClass instances - 1).		"Updates the value holder with the number of droppings for myClass."		self incDroppingCounterFor: (aDroppedPattern myClass).		self paintAsDroppedPattern: aDroppedPattern on: aGC	].	cd removeAll: droppings.	droppedCollection addAll: droppings.		^droppings size</body>

<body package="IBL" selector="ibl3">ibl3	| pattern  simPattern gc |		gc := (self builder namedComponents at: #Subcanvas2) widget graphicsContext.	gc clear.	self cleanGUI.	transcript show: '----------------------------------'; cr.	transcript show: 'Training Spiral Data using IB3'; cr; show: 'Red dots represent dropped patterns.'; cr.	(self acceptPatternsWithN0 value) ifTrue: [transcript show: 'Patterns with n = 0 are set to be acceptable.'; cr].	"Initialize collections such as CD, trainBuffer, etc. Also zero pattern usage statistics and Precision Intervals."	self initializeCollections.	"Present training pattern is a random pattern in the buffer."	pattern := self chooseFirstPatternFrom: trainBuffer With: random.	"The first training pattern is always included without criticism into the DC."	cd add: pattern.	pattern incCorrect.	pattern myClass incInstances.	self incInstancesCounterFor: (pattern myClass).	self updateClassBoundaries.	"The first pattern has to be painted explicitly on the Canvas"	self paintFirstPattern: pattern on: gc.	"self halt."           	(train size - 1) timesRepeat: [		"Get a random pattern from the trainBuffer. 		 Remove it later from trainBuffer in order to avoid re-using it."		pattern := trainBuffer at: ((random next * (trainBuffer size - 1)) rounded + 1).		(self verbose value) ifTrue: [transcript cr; show: '==Training #', pattern name displayString,' Class: #',pattern myClass name displayString,' =='; cr].		"Get the most similar acceptable neighbor pattern to this training pattern."		"Prints all confidence intervals (CIs) on the Transcript window."		simPattern := self mostSimilarAcceptableNeighborFor: pattern in: cd.		"Compare the classes of the patterns."		((pattern myClass name) = (simPattern myClass name))			ifTrue: [				"Increment correct classifications counters."				self incCorrect.				simPattern incCorrect.				(self verbose value) ifTrue: [transcript cr; show: 'Discarded.'; cr.].			]			ifFalse: [				"Increment in-correct classifications counters."				self incIncorrect.				simPattern incIncorrect.				"Independently of the classification received,				 paint the dot with the correct class color."				gc setPaintToColor: (pattern myClass color). 				gc displayDotOfDiameter: (self dotsize value asNumber)  at: ((pattern x)@(pattern y)).	     			"Add another instance to the frequency of this class."				"Will be used to calculate the Frequency Interval (FI) of this class."				pattern myClass incInstances.				self incInstancesCounterFor: (pattern myClass).				cd add: pattern.				self CDsize value: (cd size).				(self verbose value) ifTrue: [transcript cr; show: 'Learned.'; cr. ].			].		"Remove the pattern from the to-be-trained set."		trainBuffer remove: pattern.		"Increment processed instances counter of the classes."		self classes do: [ :aClass |			aClass n: (cd size).		].		"Update Class Boundaries"		self updateClassBoundaries.		"=== Test if Something should be dropped. ==="		" No parameters need to be passed since the 		  test for droppings is performed each time on 		  the CD as a whole."		(self allowDropping value) ifTrue: [			(self verbose value) ifTrue: [				transcript show: '==== Dropping ===='; cr.			].			self processDroppingsFor: gc.		].		"==============================="		(self stepwise value) ifTrue: [self question].	].	self selectCDList.</body>

<body package="IBL" selector="ibl1">ibl1	| pattern  simPattern gc |	gc := (self builder namedComponents at: #Subcanvas2) widget graphicsContext.	gc clear.	self cleanGUI.	transcript show: '----------------------------------'; cr.	transcript show: 'Training Spiral Data using IB1'; cr; show: 'Red dots represent missclassified patterns.'; cr.	"Initialize collections such as CD, trainBuffer, etc. Also zero pattern usage statistics and Precision Intervals."	self initializeCollections.	"Present training pattern is a random pattern in the buffer."	pattern := self chooseFirstPatternFrom: trainBuffer With: random.	"The first training pattern is always included without criticism into the DC."	cd add: pattern.	"The first pattern has to be painted explicitly on the Canvas. Use a different color for it."	self paintFirstPattern: pattern on: gc.	              	(train size - 1) timesRepeat: [		"Get a random pattern from the trainBuffer. 		 Remove it later from trainBuffer in order to avoid re-using it."		pattern := trainBuffer at: ((random next * (trainBuffer size - 1)) rounded + 1).		"Get the most similar pattern to this training pattern."		simPattern := self mostSimilarFor: pattern in: cd.		"Compare the classes of the patterns."		((pattern myClass name) = (simPattern myClass name))			ifTrue: [				self correct value: ( self correct value + 1 ).				simPattern incCorrect.				gc setPaintToColor: (pattern myClass color).			]			ifFalse: [				self incorrect value: ( self incorrect value + 1 ).				simPattern incIncorrect.				gc setPaintToColor: (ColorValue red).			].		gc displayDotOfDiameter: (self dotsize value asNumber)  at: ((pattern x)@(pattern y)).		"Classified! Now learn it."		cd add: pattern.		self CDsize value: (cd size).		"Remove the pattern from the training set."		trainBuffer remove: pattern.		(self stepwise value) ifTrue: [self question].	].	self selectCDList.</body>

<body package="IBL" selector="ibl2">ibl2	| pattern  simPattern gc |	gc := (self builder namedComponents at: #Subcanvas2) widget graphicsContext.	gc clear.	self cleanGUI.	transcript show: '----------------------------------'; cr.	transcript show: 'Training Spiral Data using IB2'; cr; show: 'Dots represent learned patterns.'; cr.	"Initialize collections such as CD, trainBuffer, etc. Also zero pattern usage statistics and Precision Intervals."	self initializeCollections.	"Present training pattern is a random pattern in the buffer."	pattern := self chooseFirstPatternFrom: trainBuffer With: random.	"The first training pattern is always included without criticism into the DC."	cd add: pattern.	"The first pattern has to be painted explicitly on the Canvas"	self paintFirstPattern: pattern on: gc.	(train size - 1) timesRepeat: [		"Get a random pattern from the trainBuffer. 		 Remove it later from trainBuffer in order to avoid re-using it."		pattern := trainBuffer at: ((random next * (trainBuffer size - 1)) rounded + 1).		"Get the most similar pattern to this training pattern."		simPattern := self mostSimilarFor: pattern in: cd.		"Compare the classes of the patterns."		((pattern myClass name) = (simPattern myClass name))			ifTrue: [				self correct value: ( self correct value + 1 ).				simPattern incCorrect.			]			ifFalse: [				self incorrect value: ( self incorrect value + 1 ).				simPattern incIncorrect.				"Independently of the classification received,				 paint the dot with the correct class color."				gc setPaintToColor: (pattern myClass color). 				gc displayDotOfDiameter: (self dotsize value asNumber)  at: ((pattern x)@(pattern y)).				cd add: pattern.				self CDsize value: (cd size).			].		"Remove the pattern from the to-be-trained set."		trainBuffer remove: pattern.		(self stepwise value) ifTrue: [self question].	].	self selectCDList.</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>printing</category>

<body package="IBL" selector="showClassBoundariesFor:">showClassBoundariesFor: aClass		"Show values evolving on the System Transcript."		Transcript show: 'Class named: '; show: (aClass name printString); cr.		Transcript show: (aClass lowerAcceptanceBoundary) printString; cr.		Transcript show: (aClass upperAcceptanceBoundary) printString; cr.		Transcript show: (aClass lowerDroppingBoundary) printString; cr.		Transcript show: (aClass upperDroppingBoundary) printString; cr.</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>initialization</category>

<body package="IBL" selector="initialize">initialize	super initialize.	canvasSize := 300.	color1 := ColorValue yellow.	color2 := ColorValue springGreen.	classes := OrderedCollection new.	cd := OrderedCollection new.	train := OrderedCollection new.	trainBuffer := OrderedCollection new.	droppedCollection := OrderedCollection new.</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>accessing</category>

<body package="IBL" selector="classes:">classes: aCollection	"Sets the collection that contains the Classes of this IBL run"	classes := aCollection</body>

<body package="IBL" selector="classes">classes	"Returns the collection that contains the Classes of this IBL run"	^classes</body>

<body package="IBL" selector="cd:">cd: anOrderedCollection	^cd := anOrderedCollection</body>

<body package="IBL" selector="cd">cd	^cd</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>actions</category>

<body package="IBL" selector="trainWithData">trainWithData	Transcript clear.	(self algorithm value = #IBL1) ifTrue: [ self ibl1 ].	(self algorithm value = #IBL2) ifTrue: [ self ibl2 ].	(self algorithm value = #IBL3) ifTrue: [ self ibl3 ].</body>

<body package="IBL" selector="about">about	IBLAboutWindow open.</body>

<body package="IBL" selector="generateNoisyDoubleSpiral">generateNoisyDoubleSpiral	self generateClassesForSpiral.	self cleanGUI.	self noisySpiral</body>

<body package="IBL" selector="testWithRandomData">testWithRandomData	self test.</body>

<body package="IBL" selector="testWithSystematicData">testWithSystematicData	|  pattern gc x y |	gc := (self builder namedComponents at: #Subcanvas3) widget graphicsContext.	gc clear. 	x := 0.	canvasSize timesRepeat: [	 	x := x + 1.		y := 0.  		canvasSize timesRepeat: [  			y := y + 1.			pattern := IBLPattern x: x y: y.			"Transcript show: (pattern at: 1) printString,' ',(pattern at: 2) printString; cr."			pattern myClass: ((self mostSimilarFor: pattern in: cd) myClass).			gc setPaintToColor: (pattern myClass color).      		gc displayDotOfDiameter: 2 at: ((pattern x)@(pattern y)). 		]	].</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>change reacting</category>

<body package="IBL" selector="acceptanceCIchanged">acceptanceCIchanged	self acceptanceCI value: ((self acceptanceCIslider value) / 100)</body>

<body package="IBL" selector="droppingFIchanged">droppingFIchanged	self droppingFI value: ((self droppingFIslider value) / 100)</body>

<body package="IBL" selector="datasetChanged">datasetChanged	(self dataset value = #train) ifTrue: [(self builder namedComponents at: #List1) widget model value: train. ].	(self dataset value = #trainBuffer) ifTrue: [(self builder namedComponents at: #List1) widget model value: trainBuffer. ].	(self dataset value = #dropped) ifTrue: [(self builder namedComponents at: #List1) widget model value: droppedCollection].	(self dataset value = #cd) ifTrue: [(self builder namedComponents at: #List1) widget model value: cd].</body>

<body package="IBL" selector="droppingCIchanged">droppingCIchanged	self droppingCI value: ((self droppingCIslider value) / 100)</body>

<body package="IBL" selector="sigmaChanged">sigmaChanged		self sigma value: ((self sigmaSlider value) / 1000)</body>

<body package="IBL" selector="acceptanceFIchanged">acceptanceFIchanged	self acceptanceFI value: ((self acceptanceFIslider value) / 100)</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>private - patterns and classes</category>

<body package="IBL" selector="reinitializePatterns">reinitializePatterns	train do: [:aPattern |		aPattern reinitialize.	].</body>

<body package="IBL" selector="incDroppingCounterFor:">incDroppingCounterFor: aClass	"Updates the value holder with the number of droppings for a given pattern class.	 Supposes there are only two classes."		 (aClass name = 1) 	ifTrue: [self droppedClass1 value: (self droppedClass1 value + 1) ]	ifFalse: [self droppedClass2 value: (self droppedClass2 value + 1)].	self dropped value: (self dropped value + 1).</body>

<body package="IBL" selector="reinitializeClasses">reinitializeClasses	"Zeroes the counters used in the classes from IBL3 on."	self classes do: [ :aClass |		aClass n: 0.		aClass instances: 0.		aClass correct: 0.		aClass incorrect: 0.	].</body>

<body package="IBL" selector="cleanGUI">cleanGUI	"Cleans number value holders for e new run of IBL3-5"	self  lowerAcceptanceBoundary value: 0.0.	self  lowerAcceptanceBoundary2 value: 0.0.	self  lowerDroppingBoundary value: 0.0.	self  lowerDroppingBoundary2 value: 0.0.	self  upperAcceptanceBoundary value: 0.0.	self  upperAcceptanceBoundary2 value: 0.0.	self  upperDroppingBoundary value: 0.0.	self  upperDroppingBoundary2 value: 0.0.		self instancesClass1 value: 0.	self instancesClass2 value: 0.	self dropped value: 0.	self droppedClass1 value: 0.	self droppedClass2 value: 0.	self acceptables value: 0.	self CDsize value: 0.		list := SelectionInList new.</body>

<body package="IBL" selector="generateClassesForSpiral">generateClassesForSpiral	self classes: OrderedCollection new.	self classes add: (IBLClass named: 1 color: color1).	self classes add: (IBLClass named: 2 color: color2).	self classes do: [:aClass	].</body>

<body package="IBL" selector="initializeCollections">initializeCollections	self correct value: 0.	self incorrect value: 0.	"Create a brand new CD."	cd := OrderedCollection new.	"Empty the Droppings, just in case the last simulation was an IB3 or IB4 or IB5"	droppedCollection := OrderedCollection new.	"Create a brand new random generator."		random := FastRandom new.	"Reinitialize the counters in the Patterns (correct, incorrect, boundaries, etc)."	self reinitializePatterns.		"Create an ephemerous copy of the training set.	 Patterns in this copy will be removed as they are trained."	trainBuffer := train copy.	"Reinitialize the counters in the Classes (correct, incorrect, instances, n)."	self reinitializeClasses.	self acceptables value: 0.</body>

<body package="IBL" selector="selectCDList">selectCDList	self dataset value: #cd.</body>

<body package="IBL" selector="incInstancesCounterFor:">incInstancesCounterFor: aClass	"Updates the value holder with the number of droppings for a given pattern class.	 Supposes there are only two classes."		 (aClass name = 1) 	ifTrue: [self instancesClass1 value: (self instancesClass1 value + 1) ]	ifFalse: [self instancesClass2 value: (self instancesClass2 value + 1)].</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>calculations</category>

<body package="IBL" selector="simX:Y:">simX: aPattern Y: anotherPattern	| sum |	sum := 0.0.	sum := sum + (((aPattern x) - (anotherPattern x)) squared).	sum := sum + (((aPattern y) - (anotherPattern y)) squared).	^(sum sqrt) negated.</body>

<body package="IBL" selector="updateClassBoundaries">updateClassBoundaries	"Update the Lower and Upper bounds of each class' Frequency Intervals (FI).	 Called after each new pattern is learned, using the formula given in: 	 Aha, David. Tolerating noisy, irrelevant and novel attributes in instance-	 based learning algorithms. Int. J. Man-Machine Studies (1992) 36, 267-287. at page 276"	self classes do: [ :aClass |		"Boundaries of the class' Frequency Interval (FI)"		"A lower confidence test (z represents 75%) represents confidence level for dropping"		aClass lowerAcceptanceBoundary: (aClass lowerBoundaryZ: 0.75).		aClass upperAcceptanceBoundary: (aClass upperBoundaryZ: 0.75).		"A high (z represents 90%) confidence is used for acceptance"		aClass lowerDroppingBoundary:(aClass lowerBoundaryZ: 0.9).		aClass upperDroppingBoundary: (aClass upperBoundaryZ: 0.9).		"self showClassBoundariesFor: aClass"].	"The ugly part: update the interface explicitly without using the collection."	self lowerAcceptanceBoundary value: (self classes at: 1) lowerAcceptanceBoundary.	self lowerAcceptanceBoundary2 value: (self classes at: 2) lowerAcceptanceBoundary.	self upperAcceptanceBoundary value: (self classes at: 1) upperAcceptanceBoundary.	self upperAcceptanceBoundary2 value: (self classes at: 2) upperAcceptanceBoundary.	self lowerDroppingBoundary value: (self classes at: 1) lowerDroppingBoundary.	self lowerDroppingBoundary2 value: (self classes at: 2) lowerDroppingBoundary.	self upperDroppingBoundary value: (self classes at: 1) upperDroppingBoundary.	self upperDroppingBoundary2 value: (self classes at: 2) upperDroppingBoundary.</body>

<body package="IBL" selector="chooseWithRandomProbability">chooseWithRandomProbability	"Let's choose a random pattern!"	| randomPattern position pattern |	randomPattern := FastRandom new.	position := (((randomPattern next) * (cd size)) truncated) + 1.	pattern := cd at: position.	(self verbose value) ifTrue: [		"Let's put out a trace of the random patterns being chosen..."		transcript show: 'Size:', cd size displayString, 					' Pos.:', position displayString,' #:',pattern name displayString,					' Class: #', pattern myClass name displayString, 					' Sim.:', pattern sim displayString; cr.	].	^pattern</body>

<body package="IBL" selector="chooseFirstPatternFrom:With:">chooseFirstPatternFrom: aTrainBuffer With: aRandom	| pattern |	"Employs the FastRandom instance created before to choose a random pattern from the trainingbuffer	 to start the training process."	pattern := aTrainBuffer at: ((aRandom next * (aTrainBuffer size - 1)) rounded + 1).	"The first training pattern has to be removed from the training set before we start training."	aTrainBuffer remove: pattern. 	"Return the pattern."	^pattern</body>

<body package="IBL" selector="mostSimilarAcceptableNeighborFor:in:">mostSimilarAcceptableNeighborFor: aPattern in: aDC	| pattern orderedPatterns i |	"Go through the whole DC in order to calculate similarity of each DC member to the present pattern."	aDC do: [ :anotherPattern |		anotherPattern sim: (aPattern simXY: anotherPattern).	].	orderedPatterns := SortedCollection sortBlock: [ :pat1 :pat2 |  (pat1 sim) &gt;= (pat2 sim) ].	orderedPatterns addAll: aDC.	"self halt."	"Calculate acceptability until an Acceptable is Found or there are no more orderedPatterns"	i := 1.	pattern := orderedPatterns first.	[(i &lt;= (orderedPatterns size)) and: [pattern notAcceptableAt: self]] whileTrue: [		i := i + 1.		 (i &lt;= (orderedPatterns size)) ifTrue: [pattern := orderedPatterns at: i].	].	(i &gt; (orderedPatterns size))  ifTrue: [		"No suitable pattern was found. Will choose at random."		(self verbose value) ifTrue: [ transcript show: 'No suitable pattern was found. Will choose at random'; cr].		(self policy value = #first) ifTrue: [self halt. "should not happen!" pattern := orderedPatterns first].		(self policy value = #random)ifTrue: [ pattern := self chooseWithRandomProbability ].		(self policy value = #weighted) ifTrue: [pattern := self chooseWithWeightedProbability].		] ifFalse: [self acceptables value: ((self acceptables value) + 1)].	"self showAll."	"self halt."	^pattern.</body>

<body package="IBL" selector="incCorrect">incCorrect	correct value: (correct value + 1).</body>

<body package="IBL" selector="chooseWithWeightedProbability">chooseWithWeightedProbability	| myRand myClass myCollection myPatternPosition |	myRand := FastRandom new.	myClass := ((myRand next * 2) truncated) + 1.		myCollection := cd select: [:aPattern | aPattern myClass name = myClass].	(myCollection size = 0) ifTrue: [		"If there are no instances of myClass, then I havo no choice than 		 changing the class..."		(myClass = 1) ifTrue: [myClass := 2] ifFalse: [myClass := 1].		myCollection := cd select: [:aPattern | aPattern myClass name = myClass].	].		myPatternPosition := ((myRand next * (myCollection size)) truncated) + 1.	^myCollection at: myPatternPosition.</body>

<body package="IBL" selector="incIncorrect">incIncorrect	incorrect value: (incorrect value + 1).</body>

<body package="IBL" selector="mostSimilarFor:in:">mostSimilarFor: aPattern in: aDC	| sim pattern maxSim |	"Go through the whole DC in order to find the most similar pattern.	 Set the initial dis-similarity to an impossible value."	maxSim := -1000000.0.	aDC do: [ :anotherPattern |		sim := self simX: aPattern Y: anotherPattern.		(sim &gt; maxSim) ifTrue: [			maxSim := sim.			pattern := anotherPattern.		].	].	^pattern.</body>

<body package="IBL" selector="normalForRandom:">normalForRandom: aRandom	| mean  x gauss |	"Generates noise with normal distribution and sigma = 0.398942 and mean = 0.0. 	 This will make gaus(x) = 1.0 for x = 0 and produce an extremely steep Gauss bell. 		 Since we want gauss(1) -&gt; 1 and gauss(0) -&gt; 0, we invert the random number. 	 Also, as input we use uniformly distributed random numbers between 0.0 and 0.5. 	 Both conditions are guaranteed in x := (1 - aRandom) * 0.5."	"sigma := 0.398942 asValue."	mean := 0.0.	x := (1 - aRandom) * 0.5.	gauss := (1 /  ((self sigma value) * ((2 * (Float pi)) sqrt))  ) * ((Float e) raisedTo: ((   ((x - mean) squared)  / ((2*((self sigma value) squared))  ) negated)   )).		"Transcript show: 'r:', aRandom displayString,' g(x):', gauss displayString; cr."		^gauss</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>private - drawing patterns</category>

<body package="IBL" selector="paintFirstPattern:on:">paintFirstPattern: aPattern on: aGC	"Independently of the classification received,	 paint the dot with the correct class color."	(aPattern myClass name = 1) 		ifTrue: [aGC setPaintToColor: (ColorValue orange). 			transcript show: 'First pattern: ',aPattern x truncated displayString,'@',aPattern y truncated displayString,' Class: #1. Color: Orange.'; cr]		ifFalse: [aGC setPaintToColor: (ColorValue purple).  			transcript show: 'First pattern: ',aPattern x truncated displayString,'@',aPattern y truncated displayString,' Class: #2. Color: Purple.'; cr] . 	 aGC displayDotOfDiameter: (self dotsize value asNumber)  at: ((aPattern x)@(aPattern y)).	"self halt."</body>

<body package="IBL" selector="paintAsDroppedPattern:on:">paintAsDroppedPattern: aPattern on: aGC	"Repaints the pattern that was dropped as a red dot"	aGC setPaintToColor: (ColorValue red).	aGC displayDotOfDiameter: (self dotsize value asNumber)  at: ((aPattern x)@(aPattern y)).</body>

<body package="IBL" selector="noisySpiral">noisySpiral	| theta radius gc radiusDecrementDenominator pattern patternNumber error |		transcript clear.		(self noise value = 0)		ifTrue: [transcript show: 'Drawing double spiral without noise.'; cr]		ifFalse: [self transcript show: 'Drawing noisy spiral with noise: ', self noise value displayString, ' and ', probabilityDistribution value displayString, ' probability distribution.'; cr.].	train removeAll.	random := FastRandom new.	radiusDecrementDenominator := canvasSize * 1.4.	"Clear test results window, just in case there is something plotted there..."	gc := (self builder namedComponents at: #Subcanvas3) widget graphicsContext.	gc clear.	"Clear training result window, just in case there is something plotted there..."	gc := (self builder namedComponents at: #Subcanvas2) widget graphicsContext.	gc clear.	"Clear training pattern window in order to show the new spiral pattern."	gc := (self builder namedComponents at: #Subcanvas1) widget graphicsContext.	gc clear.	patternNumber := 0.	gc setPaintToColor: (self classes at: 1) color.	theta := 0.	radius := canvasSize/2.	180 timesRepeat: [		error := 0@0.		(self probabilityDistribution value = #uniform) 			ifTrue: [				error x: (random next). 				error y: (random next)]			ifFalse: [				error x: ((self normalForRandom: (random next)) - 0.5).				error y: ((self normalForRandom: (random next)) - 0.5)].		pattern := IBLPattern  			x: (((radius * theta degreesToRadians cos) + (canvasSize/2)) + ((error x) * (self noise value)))			y: ((radius * theta degreesToRadians sin) + (canvasSize/2) + ((error y) * (self noise value))).		pattern myClass: (self classes at: 1).		gc displayDotOfDiameter: (self dotsize value asNumber) at: (pattern x@pattern y).		train add: pattern.		self totalTraining value: (train size).		radius := radius - (canvasSize/radiusDecrementDenominator).		theta := theta + 4.		patternNumber := patternNumber + 1.		pattern name: patternNumber.	].	gc setPaintToColor: (self classes at: 2) color.	theta := 180.	radius := canvasSize/2.	180 timesRepeat: [		error := 0@0.		(self probabilityDistribution value = #uniform) 			ifTrue: [				error x: (random next). 				error y: (random next)]			ifFalse: [				error x: ((self normalForRandom: (random next)) - 0.5).				error y: ((self normalForRandom: (random next)) - 0.5)].		pattern := IBLPattern  			x: (((radius * theta degreesToRadians cos) + (canvasSize/2)) + ((error x) * (self noise value)))			y: ((radius * theta degreesToRadians sin) + (canvasSize/2) + ((error y) * (self noise value))).		pattern myClass: (self classes at: 2).		gc displayDotOfDiameter: (self dotsize value asNumber) at: (pattern x@pattern y).		train add: pattern.		self totalTraining value: (train size).		radius := radius -  (canvasSize/radiusDecrementDenominator).		theta := theta + 4.		patternNumber := patternNumber + 1.		pattern name: patternNumber.	].	"Make the GUI show the new training pattern set."	self dataset value: #train.</body>
</methods>

<methods>
<class-id>IBLBrowser</class-id> <category>obsolete</category>

<body package="IBL" selector="spiral">spiral	| theta radius x y gc |		self halt.	train := OrderedCollection new.	gc := (self builder namedComponents at: #Subcanvas1) widget graphicsContext.	gc clear.	gc setPaintToColor: (ColorValue lightYellow).	theta := 0.	radius := canvasSize/2.	180 timesRepeat: [		x := (radius * theta degreesToRadians cos) + 128.		y := (radius * theta degreesToRadians sin) + 128.		gc displayLineFrom: (x@y) to: (x@y + 1).		train add: (Array with: x with: y with: 1).		self totalTraining value: (train size).		radius := radius - 0.58.		theta := theta + 4.	].	gc setPaintToColor: (ColorValue springGreen).	theta := 180.	radius := 125.	180 timesRepeat: [		x := (radius * theta degreesToRadians cos) + 128.		y := (radius * theta degreesToRadians sin) + 128.		gc displayLineFrom: (x@y) to: (x@y + 1).		train add: (Array with: x with: y with: 2).		self totalTraining value: (train size).		radius := radius - 0.58.		theta := theta + 4.	].</body>

<body package="IBL" selector="test">test	|  pattern  gc |	gc := (self builder namedComponents at: #Subcanvas3) widget graphicsContext.	gc clear.	random := FastRandom new.  self iterations value timesRepeat: [      random next. 	pattern := Array with: (random next * 255 ) rounded 					with: (random next * 255 ) rounded					with: 0.	"Transcript show: (pattern at: 1) printString,' ',(pattern at: 2) printString; cr."	pattern at: 3 put:  ((self mostSimilarFor: pattern in: cd) at: 3).	(pattern last = 1)		ifTrue: [ gc setPaintToColor: (ColorValue yellow) ]		ifFalse: [ gc setPaintToColor: (ColorValue springGreen) ].      gc displayDotOfDiameter: 4 at: ((pattern at: 1)@(pattern at:2)).	"gc displayLineFrom: ((pattern at: 1)@(pattern at: 2)) to: ((pattern at: 1)@(pattern at: 2) + 1).	gc displayLineFrom: (((pattern at: 1) - 1)@(pattern at: 2)) to: (((pattern at: 1) - 1)@(pattern at: 2) + 1)."].</body>

<body package="IBL" selector="generateDoubleSpiral">generateDoubleSpiral	self halt.	self spiral</body>
</methods>


<methods>
<class-id>IBLPattern class</class-id> <category>instance creation</category>

<body package="IBL" selector="x:y:">x: aNumber y: anotherNumber	| theInstance |	"Creates an instance of IBLPattern with nil class associated."	theInstance := self new.	theInstance correct: 0.	theInstance incorrect: 0.	theInstance x: aNumber.	theInstance y: anotherNumber.	^theInstance</body>
</methods>


<methods>
<class-id>IBLPattern</class-id> <category>accessing</category>

<body package="IBL" selector="lowerDroppingBoundary:">lowerDroppingBoundary: aNumber	lowerDroppingBoundary := aNumber</body>

<body package="IBL" selector="upperAcceptanceBoundary">upperAcceptanceBoundary	^upperAcceptanceBoundary</body>

<body package="IBL" selector="incorrect:">incorrect: aNumber	incorrect := aNumber</body>

<body package="IBL" selector="upperDroppingBoundary:">upperDroppingBoundary: aNumber	upperDroppingBoundary := aNumber</body>

<body package="IBL" selector="lowerAcceptanceBoundary">lowerAcceptanceBoundary	^lowerAcceptanceBoundary</body>

<body package="IBL" selector="incorrect">incorrect	^incorrect</body>

<body package="IBL" selector="x">x	"return X-coordinate of the pattern"	^x</body>

<body package="IBL" selector="correct:">correct: aNumber	correct := aNumber</body>

<body package="IBL" selector="sim:">sim: aNumber	"Set  similarity to present pattern-to-be-learned.	 Used only in IBL3-5."	sim := aNumber</body>

<body package="IBL" selector="lowerAcceptanceBoundary:">lowerAcceptanceBoundary: aNumber	lowerAcceptanceBoundary := aNumber</body>

<body package="IBL" selector="name:">name: aNumber	"Each learned pattern has an unique identifier.	 It is simply a sequential number that it receives 	 when inserted into the CD. Patterns that are not	 selected to be learned receive no name and	 pattern names of patterns that are dropped from 	 the CD will remain unused." 	name := aNumber</body>

<body package="IBL" selector="y">y	"return Y-coordinate of the pattern"	^y</body>

<body package="IBL" selector="correct">correct	^correct</body>

<body package="IBL" selector="sim">sim	"Return similarity to present pattern-to-be-learned.	 Used only in IBL3-5."	^sim</body>

<body package="IBL" selector="upperAcceptanceBoundary:">upperAcceptanceBoundary: aNumber	upperAcceptanceBoundary := aNumber</body>

<body package="IBL" selector="myClass:">myClass: aClass	"Presently algorithms deal only with classes that have numeric names"	(aClass isKindOf: IBLClass) ifFalse: [Dialog warn: 'Class must be an instance of IBLClass.'].	class := aClass</body>

<body package="IBL" selector="upperDroppingBoundary">upperDroppingBoundary	^upperDroppingBoundary</body>

<body package="IBL" selector="lowerDroppingBoundary">lowerDroppingBoundary	^lowerDroppingBoundary</body>

<body package="IBL" selector="name">name	"Each learned pattern has an unique identifier.	 It is simply a sequential number that it receives 	 when inserted into the CD. Patterns that are not	 selected to be learned receive no name and	 pattern names of patterns that are dropped from 	 the CD will remain unused." 	^name</body>

<body package="IBL" selector="x:">x: aNumber	"set X-coordinate of the pattern"	x := aNumber</body>

<body package="IBL" selector="myClass">myClass	^class</body>

<body package="IBL" selector="y:">y: aNumber	"set Y-coordinate of the pattern"	y := aNumber</body>
</methods>

<methods>
<class-id>IBLPattern</class-id> <category>printing</category>

<body package="IBL" selector="printOn:">printOn: anObject	'#',name displayString,'.[x:' displayString, x displayString,' y:' displayString, y displayString, ' #' displayString, class name displayString, '] {c:',correct displayString,', i:', incorrect displayString,'} [lab:' displayString, lowerAcceptanceBoundary displayString,' uab:' displayString, upperAcceptanceBoundary displayString, ' ldb:' displayString ,lowerDroppingBoundary displayString,' udb:'displayString ,upperDroppingBoundary displayString,'] (sim ' displayString, sim displayString, ')' displayString  printOn: anObject</body>
</methods>

<methods>
<class-id>IBLPattern</class-id> <category>calculations</category>

<body package="IBL" selector="incIncorrect">incIncorrect	incorrect isNil ifTrue: [ incorrect := 0].	incorrect := incorrect + 1.</body>

<body package="IBL" selector="lowerBoundaryZ:">lowerBoundaryZ: z	| n p z2 lowerBoundary |	"This method calculates the Lower Boundary of the Confidence Interval (CI) of this particular pattern,	 using the formula given in: Aha, David. Tolerating noisy, irrelevant and novel attributes in instance-	 based learning algorithms. Int. J. Man-Machine Studies (1992) 36, 267-287. at page 276"	"n is the total of classification in which this particular instance was involved"	n := correct + incorrect.	"In order to avoid division by 0 when beginning the algorithm, teste here if n is zero and return a huge value."	(n = 0) ifTrue: [ ^99.0 ].	"p for CI is defined in Aha (1992) as the PRECISION of his particular instance"	p := correct / n.	"calculate z-square in advance"	z2 := z * z.	"LOWER boundary:	 p + ( z2 / (2 * n)) &gt;&gt;MINUS&lt;&lt;&lt; z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)"	lowerBoundary := p + ( z2 / (2 * n)) - (z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)).	lowerBoundary := lowerBoundary / (1 + (z2 / n)).	^lowerBoundary</body>

<body package="IBL" selector="updateConfidenceIntervalsUsing:">updateConfidenceIntervalsUsing: anIBLBrowser	self updateAcceptanceBoundariesUsing: anIBLBrowser.	self updateDroppingBoundariesUsing: anIBLBrowser</body>

<body package="IBL" selector="notAcceptableAt:">notAcceptableAt: anIBLBrowser	| notAcceptable |		"First update the CIs for this pattern. They may have changed since the last time it was used.	 My instance of the IBLBrowser has value holders that may have z values that were manually	 set by the user. For this reason we pass the instance to the calculation method."	self updateConfidenceIntervalsUsing: anIBLBrowser.	"If we are in verbose mode, let us show our Precision Interval values."	(anIBLBrowser verbose value) ifTrue: [		anIBLBrowser transcript cr; show: 'Pattern #', self name printString, ' - classe #', self myClass name printString,' Sim.:',self sim displayString; cr.		anIBLBrowser transcript show: 'Cl.#', self myClass name displayString, ' UAB: ', self myClass upperAcceptanceBoundary displayString.		anIBLBrowser transcript show: ' Pat LAB: ', self lowerAcceptanceBoundary printString; cr.].		"Check whether the pattern was used at least once before"	(self lowerAcceptanceBoundary = 99.0) ifTrue: [ 		(anIBLBrowser acceptPatternsWithN0 value) ifFalse: [			"Should not accept patterns with n = 0"			(anIBLBrowser verbose value) ifTrue: [anIBLBrowser transcript show: 'NOT Acceptable (infinite ABs)'; cr ].			^true.		]	].		"Let's do real work and compare the pattern's lower bound to the upper bound of it's class to decide 	 whether this pattern can be trusted."	((self myClass upperAcceptanceBoundary) &lt; (self lowerAcceptanceBoundary)) 		ifTrue: [ 			notAcceptable := false.			(anIBLBrowser verbose value) ifTrue: [anIBLBrowser transcript show: 'ACCEPTABLE'; cr ]]		ifFalse: [ notAcceptable := true.			(anIBLBrowser verbose value) ifTrue: [anIBLBrowser transcript show: 'NOT Acceptable'; cr ]].			^notAcceptable</body>

<body package="IBL" selector="simXY:">simXY: anotherPattern	| sum |	sum := 0.0.	sum := sum + (((self x) - (anotherPattern x)) squared).	sum := sum + (((self y) - (anotherPattern y)) squared).	^(sum sqrt) negated.</body>

<body package="IBL" selector="updateDroppingBoundaries">updateDroppingBoundaries	"A lower confidence test (z represents 75%) represents confidence level for dropping"	self lowerDroppingBoundary: (self lowerBoundaryZ: 0.75).	self upperDroppingBoundary: (self upperBoundaryZ: 0.75).</body>

<body package="IBL" selector="updateDroppingBoundariesUsing:">updateDroppingBoundariesUsing: anIBLBrowser	"A lower confidence test (z represents 75%) represents confidence level for dropping"	self lowerDroppingBoundary: (self lowerBoundaryZ: (anIBLBrowser droppingCI value)).	self upperDroppingBoundary: (self upperBoundaryZ: (anIBLBrowser droppingCI value)).</body>

<body package="IBL" selector="upperBoundaryZ:">upperBoundaryZ: z	| n p z2 upperBoundary|	"This method calculates the Upper Boundary of the Confidence Interval (CI) of this particular pattern,	 using the formula given in: Aha, David. Tolerating noisy, irrelevant and novel attributes in instance-	 based learning algorithms. Int. J. Man-Machine Studies (1992) 36, 267-287. at page 276"	"n is the total of classification in which this particular instance was involved"	n := correct + incorrect.	"In order to avoid division by 0 when beginning the algorithm, teste here if n is zero and return a huge value."	(n = 0) ifTrue: [ ^99.0 ].	"p for CI is defined in Aha (1992) as the PRECISION of his particular instance"	p := correct / n.	"calculate z-square in advance"	z2 := z * z.	"UPPER boundary:	 p + ( z2 / (2 * n)) &gt;&gt;PLUS&lt;&lt;&lt; z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)"	upperBoundary := p + ( z2 / (2 * n)) + (z * (((p * (1 - p) / n) + (z2 / (4 * n * n))) sqrt)).	upperBoundary := upperBoundary / (1 + (z2 / n)).	^upperBoundary</body>

<body package="IBL" selector="incCorrect">incCorrect	correct isNil ifTrue: [ correct := 0].	correct := correct + 1.</body>

<body package="IBL" selector="dropableAt:">dropableAt: anIBLBrowser	| dropable |		"To be sure, update the Precision Intervals."	self updateConfidenceIntervalsUsing: anIBLBrowser.	"If the lower dropping boundary of my Precision Interval is higher than 	 the upper dropping boundary of the Frequency Interval of my class, 	 then I should be dropped.		 David W. Aha and Dennis Kibler. Noise-Tolerant Instance-Based Learning Algorithms. 	 Machine Learning, 1992"		((self myClass lowerDroppingBoundary) &gt; (self upperDroppingBoundary)) 		ifTrue: [ dropable := true.			(anIBLBrowser verbose value) ifTrue: [			     anIBLBrowser transcript cr; show: 'Dropped Pattern #', self name printString, ' - classe #', self myClass name printString; cr.			     anIBLBrowser transcript show: 'Lower: ', self lowerDroppingBoundary printString; cr.	                     anIBLBrowser transcript show: 'Upper: ', self upperDroppingBoundary printString; cr.			     anIBLBrowser transcript show: 'Not Acceptable: ', dropable printString; cr.			]. 		]		ifFalse: [ dropable := false ].	^dropable</body>

<body package="IBL" selector="updateAcceptanceBoundaries">updateAcceptanceBoundaries	"A higher confidence test (z represents 90%) represents confidence level for acceptance"	self lowerAcceptanceBoundary: (self lowerBoundaryZ: 0.9).	self upperAcceptanceBoundary: (self upperBoundaryZ: 0.9).</body>

<body package="IBL" selector="updateAcceptanceBoundariesUsing:">updateAcceptanceBoundariesUsing: anIBLBrowser	"A higher confidence test (z represents 90%) represents confidence level for acceptance"	self lowerAcceptanceBoundary: (self lowerBoundaryZ: (anIBLBrowser acceptanceCI value)).	self upperAcceptanceBoundary: (self upperBoundaryZ: (anIBLBrowser acceptanceCI value)).</body>
</methods>

<methods>
<class-id>IBLPattern</class-id> <category>initialize-release</category>

<body package="IBL" selector="reinitialize">reinitialize	correct := 0.	incorrect := 0.		upperAcceptanceBoundary := nil.	lowerAcceptanceBoundary := nil. 	upperDroppingBoundary := nil.	lowerDroppingBoundary := nil.</body>
</methods>



</st-source>
